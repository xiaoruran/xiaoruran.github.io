<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS之JSLint</title>
    <url>/2020/06/03/JSLint/</url>
    <content><![CDATA[<h3 id="JSLint"><a href="#JSLint" class="headerlink" title="JSLint"></a>JSLint</h3><p>JS是一门能力很强的语言，现在已经被应用与一些大型项目中。但对于大型项目而言，很多本意事希望提高这门语言易用性的特性却成了麻烦。于时催生出一个针对JS的lint:JSLint,一个JS语法检查器和校验器<br>它是JS的一个代码质量工具。它读取源文本并进行扫描，如果发现问题，会返回一个消息描述该问题并指明该问题在源文件中的大概位置</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之事件执行机制</title>
    <url>/2020/06/03/JS%E5%BC%95%E6%93%8E%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="JS引擎事件执行机制"><a href="#JS引擎事件执行机制" class="headerlink" title="JS引擎事件执行机制"></a>JS引擎事件执行机制</h3><h4 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h4><ol>
<li><p>浏览器（或是JS引擎）执行JS的机制是基于事件循环</p>
</li>
<li><p>JS是单线程机制，在同一时间只能执行一个任务，其他任务只能排队，后续任务必须等到前一个任务结束后才能开始执行</p>
</li>
<li><p>为了避免因为某些长时间任务造成的无意义等待，JS引入了<strong>异步</strong>的概念，用另一个线程来管理异步任务。</p>
</li>
<li><p>同步任务直接在主线程队列中顺序执行，异步任务会进入另一个任务队列，不会阻塞主线程。等到主线程队列空了后，就回去异步队列查询是否有可执行的异步任务（通常异步任务需要等一些条件才能执行，如Ajax请求、文件读写），如果某个异步任务可以执行，则加入主线程队列，以此循环</p>
<h4 id="JS中基于事件循环机制（event-loop）"><a href="#JS中基于事件循环机制（event-loop）" class="headerlink" title="JS中基于事件循环机制（event loop）"></a>JS中基于事件循环机制（event loop）</h4><p>异步的概念引入是由于事件循环造成的</p>
</li>
<li><p><strong>event loop(1)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(1)</span><br><span class="line"> setTimeout(function()&#123;</span><br><span class="line">     console.log(2)</span><br><span class="line"> &#125;,0)</span><br><span class="line"> console.log(3)</span><br></pre></td></tr></table></figure>

<p>运行结果是 1 3 2</p>
<p>setTimeout里的函数并没有立即执行，而实延迟了一段时间，满足一定条件后，才开始执行，这种代码较异步代码。</p>
<p>定时器是JS中很经典的异步模型</p>
<p>按这种：JS的执行机制是</p>
</li>
</ol>
<ul>
<li>首先判断是同步还是异步，同步进入主进程，异步就进入 event tavle</li>
<li>异步任务先不执行，在event table中注册函数，满足条件后，被推入event queue</li>
<li>同步任务进入主线程后一直执行，直到主线程空闲时，才去event queue中查看是否有可执行的异步任务，若有则推入到主线程队列中执行</li>
</ul>
<ol start="2">
<li><p><strong>event loop(2)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> setTimeout(function()&#123;</span><br><span class="line">  console.log(&apos;定时器开始啦&apos;)</span><br><span class="line"> &#125;);</span><br><span class="line"> new Promise(function(resolve)&#123;</span><br><span class="line">  console.log(&apos;马上执行for循环啦&apos;);</span><br><span class="line">  for(var i = 0; i &lt; 10000; i++)&#123;</span><br><span class="line">      i == 99 &amp;&amp; resolve();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;).then(function()&#123;</span><br><span class="line">  console.log(&apos;执行then函数啦&apos;)</span><br><span class="line"> &#125;);</span><br><span class="line">console.log(&apos;代码执行结束&apos;);</span><br></pre></td></tr></table></figure>

<p>按照event loop(1)的分析结果会是 马上执行for循环 代码执行结束 定时器开始啦 执行then函数啦，但是事实并非如此，真实的执行结果是：马上执行for循环 代码执行结束 执行then函数啦 定时器开始啦<br><img src="https://images2018.cnblogs.com/blog/1053223/201808/1053223-20180831162152579-2034514663.png" alt="avatar"></p>
<p>这里可以提出更准确的划分机制:</p>
</li>
</ol>
<ul>
<li>宏任务: 包括整体代码<strong>script,setTimout,setInterval</strong></li>
<li>微任务：宏任务底下的任务<strong>Promise，process.nextTick</strong><br>在一个事件循环中，执行第一个宏任务，宏任务执行结束，执行当前事件循环中的微任务，执行完毕之后进入下一个事件循环中，或者说执行下一个宏任务；</li>
</ul>
<p>   <strong>执行宏任务 ===&gt; 执行微任务 ===&gt; 执行另一个宏任务 ===&gt; 不断循环</strong><br>   <img src="https://images2018.cnblogs.com/blog/1053223/201808/1053223-20180831162350437-143973108.png" alt="avatar"></p>
<p>   重新分析：</p>
<ul>
<li>首先执行script底下的宏任务，遇到setTimout,首先是异步任务，将其放入宏任务队列中</li>
<li>遇到Promise函数，由于是同步任务直接运行，然后遇到then，这是异步任务,同时也是微任务，放入微任务队列中</li>
<li>然后执行同步任务，打印“代码执行结束”</li>
<li>本轮宏任务结束,查看本轮的微任务,发现有个then函数，执行then函数</li>
<li>下一轮循环中，先找是否有宏任务，发现在宏任务队列中有个setTimout函数，开始执行</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  console.log(&apos;1&apos;);</span><br><span class="line"> </span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;2&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;3&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;4&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;5&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(function() &#123;</span><br><span class="line">    console.log(&apos;6&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&apos;7&apos;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&apos;8&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;9&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;10&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;11&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;12&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>解释：<br>   1、 第一轮事件循环流程分析如下：<br>    整体script作为第一个宏任务进入主线程，遇到console.log，输出1。<br>    遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。<br>    遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。<br>    遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。<br>    又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</p>
<pre><code>宏任务Event Queue   微任务Event Queue
setTimeout1         process1
setTimeout2         then1

上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。
我们发现了process1和then1两个微任务。
执行process1,输出6。
执行then1，输出8。

好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</code></pre><p>2、 那么第二轮时间循环从setTimeout1宏任务开始：</p>
<pre><code>首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，</code></pre><p>记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。</p>
<pre><code>宏任务Event Queue     微任务Event Queue
setTimeout2           process2
                      then2

第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。
    输出3。
    输出5。
    第二轮事件循环结束，第二轮输出2，4，3，5。</code></pre><p>3、 第三轮事件循环开始，此时只剩setTimeout2了，执行。<br>        直接输出9。<br>        将process.nextTick()分发到微任务Event Queue中。记为process3。<br>        直接执行new Promise，输出11。<br>        将then分发到微任务Event Queue中，记为then3。</p>
<pre><code>宏任务Event Queue     微任务Event Queue
                        process3
                        then3     
第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。
    输出10。
    输出12。
    第三轮事件循环结束，第三轮输出9，11，10，12。

整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之JSON</title>
    <url>/2020/06/03/JSON/</url>
    <content><![CDATA[<h3 id="JSON-JavaScript对象表示法"><a href="#JSON-JavaScript对象表示法" class="headerlink" title="JSON(JavaScript对象表示法)"></a>JSON(JavaScript对象表示法)</h3><p>这是一种轻量级的数据交换格式。基于JavaScript对象字面量表示法，那是JS最精华的部分之一。尽管只是JS的一个子集，但与语言无关。<br>现代编程语言写的程序，都可以用它来交换数据。它是一种文本格式，所以可以被人和机器阅读。<br>它易于实现且易于使用</p>
<h4 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h4><ul>
<li>JSON对象是一个相当于”key-value”的无序集合。名字可以是任何字符串，值可以是任何类型的JSON值，包括数组和对象</li>
<li>JSON有六种类型的值：对象、数组、字符串、布尔类型、数字、和特殊值null</li>
<li>JSON数字与JS数字类似，整数的首位不允许为0，因为一些语言用它来表示八进制数<h4 id="安全的使用JSON"><a href="#安全的使用JSON" class="headerlink" title="安全的使用JSON"></a>安全的使用JSON</h4></li>
<li>使用eval函数可以把一段JSON文本转换为一个有用的数据结构，但是eval函数有着极其可怕的安全问题。</li>
<li>可以使用<code>JSON.parse()</code>方法代替eval函数，能避免危险。如果文本中包含任何危险数据JSON.parse()会抛出一个异常，为防止服务器出现漏洞，建议总是用JSON.parse代替eval。</li>
<li>在外部数据与innerHTML进行交互式还存在另一种危险。一种常见的Ajax模式是把服务器端发送过来的一个HTML文本赋值给某个HTML元素的innerHTML属性。这是一个非常糟糕的习观，如果这个HTML中包含一个&lt;\script&gt;标签或者其等价物，那么一个恶意脚本将被执行，这也可以是因为服务器端存在漏洞<blockquote>
<p>如果一个恶意脚本在你的页面上被运行，它就有权访问这个页面的所有状态和执行该页面能做的所有操作.他能与服务器进行交互，而服务器并不能区分恶意请求。恶意脚本还能访问全局对象，这使得它有权访问用户能看到的一切，这个恶意脚本还拥有和用户对话的能力。document对象还能给该恶意脚本授权访问网络，允许它下载更多的恶意脚本，或者是在你的防火墙内探测站点，或者是把它已经窃取的隐私内容发送给世界上的任何一个服务器。这是JS全局变量的一个直接后果。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之原型链理解</title>
    <url>/2020/06/03/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>###JS原型及原型链<br>JavaScript中没有子类和父类的概念，也没有类和实例（instance）的区分,全靠一种称为”原型(prototype)链”的模式，来实现继承</p>
<p>####背景介绍</p>
<h5 id="一、-函数对象"><a href="#一、-函数对象" class="headerlink" title="一、 函数对象"></a>一、 函数对象</h5><ol>
<li>所有实例对象都有一个<code>_proto_</code>属性,该属性不是标准属性，不可以用在编程中，用于浏览器内部使用</li>
<li>所有函数都拥有<code>prototype</code>属性</li>
<li>原型对象：指的是拥有prototype属性的对象，在定义函数时就被创建</li>
<li>数组，函数，对象的原型都是Object<h5 id="二、构造函数"><a href="#二、构造函数" class="headerlink" title="二、构造函数"></a>二、构造函数</h5>构造函数，主要用来创建对象时初始化对象，每个构造函数都有prototype属性。<blockquote>
<p>例如 function Person=function(){},<br>这里Person函数的构造函数就是 Person()</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//构造方法</span><br><span class="line"> function Person(name,age,gender) &#123;</span><br><span class="line">     this.name=name;</span><br><span class="line">     this.age=age;</span><br><span class="line">     this.gender=gender;</span><br><span class="line">     this.say=function () &#123;</span><br><span class="line">     alert(this.name)</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    var person1=new Person(&apos;钟女士&apos;,80,&apos;女&apos;);</span><br><span class="line">    var person2=new Person(&apos;张女士&apos;,80,&apos;女&apos;);</span><br><span class="line">    console.log(person2)</span><br><span class="line">    console.log(person1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//创建构造函数</span><br><span class="line">        function Word(words)&#123;</span><br><span class="line">            this.words = words;</span><br><span class="line">        &#125;</span><br><span class="line">        //相当于构造对象的原型方法，此方法属于构造方法内</span><br><span class="line">        Word.prototype = &#123;</span><br><span class="line">            alert()&#123;</span><br><span class="line">                alert(this.words);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //创建实例</span><br><span class="line">        var w = new Word(&quot;hello world&quot;);</span><br><span class="line">        w.print = function()&#123;</span><br><span class="line">            console.log(this.words);</span><br><span class="line">            console.log(this);  //Person对象</span><br><span class="line">        &#125;</span><br><span class="line">        w.print();  //hello world</span><br><span class="line">        w.alert();  //hello world</span><br></pre></td></tr></table></figure>

<blockquote>
<p>print方法时w实例本身具有的方法，alert不属于w实例的方法，属于构造函数的方法，w.alert()也会打印，是因为实例继承构造函数的方法</p>
</blockquote>
<p><strong>实例w的隐式原型(_proto_)指向它的构造函数(函数本身名)的显式原型（prototype）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w._proto_=== Word.prototype</span><br><span class="line">Word.prototype.constructor=== Word() </span><br><span class="line">w._proto_.constructor=== Word()</span><br></pre></td></tr></table></figure>

<p><strong>当调用实例的某种方法或属性时，首先会查找自身，若没有，则会去它的_proto_属性中查找,也就是它对应类的原型中查找。</strong></p>
<h5 id="三、原型及原型链"><a href="#三、原型及原型链" class="headerlink" title="三、原型及原型链"></a>三、原型及原型链</h5><ul>
<li><p><code>_proto_</code>是实例的一个属性，这个属性本身是一个对象，包含有两个属性，一个是<code>constructor</code>和<code>_proto_</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        Function.prototype.a = &quot;a&quot;;</span><br><span class="line">Object.prototype.b = &quot;b&quot;;</span><br><span class="line">function Person()&#123;&#125;</span><br><span class="line">console.log(Person);    //function Person()</span><br><span class="line">let p = new Person();</span><br><span class="line">console.log(p);         //Person &#123;&#125; 对象</span><br><span class="line">console.log(p.a);       //undefined</span><br><span class="line">console.log(p.b);       //b</span><br><span class="line">console.log(p.__proto__.constructor);   //function Person()&#123;&#125;</span><br><span class="line">console.log(p.__proto__.__proto__);     //对象&#123;&#125;，拥有很多属性值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>p.<em>proto</em>=Person.prototype</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">           //Function</span><br><span class="line">function Function()&#123;&#125;</span><br><span class="line">console.log(Function);  //Function()</span><br><span class="line">console.log(Function.prototype.constructor);    //Function()</span><br><span class="line">console.log(Function.prototype.__proto__);      //Object.prototype</span><br><span class="line">console.log(Function.prototype.__proto__.__proto__);    //NULL</span><br><span class="line">console.log(Function.prototype.__proto__.constructor);  //Object()</span><br><span class="line">console.log(Function.prototype.__proto__ === Object.prototype); //true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>#####总结</p>
<ol>
<li>查找属性，如果没有，则去它的_proto_中查找，也就是构造函数的原型中查找，如果构造函数中也没有，因为构造函数也是对象，也会通过构造函数的_proto属性查找，一直道null，没有的话返回undefined</li>
<li>p._proto_=Person.prototype</li>
<li>p._proto_.constructor === function Person(){}</li>
<li>p._proto_._proto_=Object.prototype</li>
<li>p._proto_._proto_._proto_===Object.prototype._proto_ === null</li>
<li>原型链是通过_proto_形成的而非prototype</li>
</ol>
<p><img src="https://img-blog.csdn.net/2018030222305858" alt="avatar"><br>参考博客：<br> <a href="https://blog.csdn.net/yucihent/article/details/79424506" target="_blank" rel="noopener">深入javascript之原型和原型链</a><br><a href="https://blog.csdn.net/qq_42019025/article/details/80708446" target="_blank" rel="noopener">JS原型和原型链是什么？</a>  </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2020/06/03/about/</url>
    <content><![CDATA[<blockquote>
<p>A Student, Now live in Nanning, China.</p>
</blockquote>
<p>姓名：曹涵<br>现居：暂时没有<br>GitHub: <a href="https://github.com/xiaoruran/xiaoruran.github.io" target="_blank" rel="noopener">Cao_Han</a><br>QQ: 3314508022<br>微信: ch18325622987</p>
<a id="more"></a>

<!-- ![avatar.jpg](https://i.loli.net/2019/12/02/Hw5WJIMKzi1YrU8.jpg) -->

<img src="https://pic.downk.cc/item/5e739676e83c3a1e3ab4b361.jpg" alt="avatar" width="300" style="border-radius:50%">
]]></content>
      <tags>
        <tag>自我介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之闭包理解</title>
    <url>/2020/06/01/JS%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h3 id="JS闭包理解"><a href="#JS闭包理解" class="headerlink" title="JS闭包理解"></a>JS闭包理解</h3><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>作用： 创建一个独立的作用域。这个作用域的变量外面访问不到（避免变量污染）</p>
<ol>
<li><p><code>(function foo(){}())</code><br>如果直接写function foo(){}()解释器会报错。<em>立即执行函数的调用方式是将函数表达式、调用操作符、分组操作符放到一个括号内，来告诉解释器这里有一个需要解释器立即执行的函数</em>。否则通常情况下，解析器遇到function关键子，都会把它当成一个函数声明，而不是个函数表达式</p>
<ul>
<li>立即执行函数的写法</li>
<li>相当于 function foo(){};foo();</li>
<li>相当于先定义一个函数，然后调用执行它</li>
<li>在最后面的括号里面可以直接写传递的参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function foo(n1,n2)&#123;</span><br><span class="line">    console.log(n1+n2);</span><br><span class="line">&#125;(3,5));  //8</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>(function foo(){})()</code><br>总的语法和上面的一致</p>
<blockquote>
<p>注意：当在不需要表达式的场景下，就不需要用括号括起来了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void function foo()&#123;&#125;()</span><br><span class="line">var foo =function()&#123;&#125;();</span><br><span class="line">true &amp;&amp; function()&#123;&#125;();</span><br><span class="line">0,function()&#123;&#125;();</span><br><span class="line">//以上都是作为函数表达式，所以不需要用括号括起来了</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>对于立即执行函数，也可以给他们传入参数，在最后一个括号里传</p>
</blockquote>
<ol start="3">
<li>像常见的<code>(function($){}(jQuery))</code>;就是将实参jQuery作为实参传入到函数function($){}中，通过形参$接受</li>
<li><code>$(function(){})</code><ul>
<li>需要引入jQuery包</li>
<li>是$(document).ready(function(){})的简写，两者效果完全一样</li>
</ul>
</li>
<li>可以在function(){}()的前面加上!、+、-、~也可以使变成函数表达式，变成立即执行函数</li>
</ol>
<h4 id="是时候理解一波了"><a href="#是时候理解一波了" class="headerlink" title="是时候理解一波了"></a>是时候理解一波了</h4><p>我的理解：</p>
<ul>
<li>js中函数内部可以读取到全局变量，而函数外部不能读取函数内部的局部变量。此时闭包就是为了能使得从外部访问函数内部的变量。</li>
<li>为了让某些变量始终保持在内存中，但同时也可能导致内存消耗的问题</li>
<li>方便调用上下文的局部变量，利于代码封装<br>两个方面：<ol>
<li>函数作为返回值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> function a()&#123;</span><br><span class="line">  var name=&apos;hh&apos;;</span><br><span class="line">  return function()&#123;</span><br><span class="line">      return name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var b=a();</span><br><span class="line">//将返回的匿名函数赋值给b，此时b相当于a内部的匿名函数，可以访问到a内部的变量</span><br><span class="line">console.log(b());</span><br><span class="line"> //通过b(),执行a内部的匿名函数，最后返回a函数内部的变量</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<blockquote>
<p>这段代码实现了全局变量b可以获取到a方法下的局部变量name的值<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   function f1()&#123;</span><br><span class="line">    var num=12;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var n=0;</span><br><span class="line">        console.log(++num);</span><br><span class="line">        console.log(++n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var fn=f1();</span><br><span class="line">fn();  //13 1</span><br><span class="line">//第一次调用f1里的匿名函数</span><br><span class="line">fn();  //14 1</span><br><span class="line">//第二次调用f1里的匿名函数</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>上述代码中在fn执行完后，就应该连同它里面的变量以同销毁，但在此case中，匿名函数作为f1的返回值被赋给了fn，这时候就相当于fn=function(var n=0;…){},并且匿名函数内部引用这f1里面的变量num，所以变量num无法被销毁，但每次每次n是重新创建的，这里就产生了内存消耗的问题（num）<br>再来一个case:依次输出1到5<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> (function()&#123;</span><br><span class="line">var i=1;</span><br><span class="line">for(i=0;i&lt;5;i++)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">     console.log(i);</span><br><span class="line">    &#125;,100)</span><br><span class="line">&#125;</span><br><span class="line">&#125;());  //5，5，5，5，5</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>这是会发现出现了5个5，与预期不同。我们来分析一下，首先由于js是单线程语言，遇到setTimeout函数，这是一个异步函数，将之放入异步函数队列，等到主线程运行完。好！主线程运行完了，即5个循环运行结束，这是的i为5。此时运行异步队列中的线程，此时i为5，所以打印的都是5。我们可以采用一下立即执行函数来解决这个问题<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"> var i=0;</span><br><span class="line"> for(i=0;i&lt;5;++i)&#123;</span><br><span class="line">     (function(i)&#123;</span><br><span class="line">         setTimeout(function()&#123;</span><br><span class="line">             console.log(i);</span><br><span class="line">            &#125;,100)</span><br><span class="line">     &#125;(i));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;()); //0,1,2,3,4</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>此时已完成预期效果。这里通过闭包来保存变量i，将setTimeout函数放入立即执行函数中，将for循环中的i作为参数传递，通过立即执行函数，相当于将i固定保存在匿名函数中（这就是立即执行函数的魅力），100毫秒后打印出0、1、2、3、4<br>    若要在隔100毫秒在输出，可以<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"> var i=0;</span><br><span class="line"> for(i=0;i&lt;5;++i)&#123;</span><br><span class="line">     (function(i)&#123;</span><br><span class="line">         setTimeout(function()&#123;</span><br><span class="line">             console.log(i);</span><br><span class="line">            &#125;,i*100)</span><br><span class="line">     &#125;(i));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;()); //0,1,2,3,4</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ol start="2">
<li><p>闭包作为参数传递<br>将(function(){}()) 中最后一个括号里面传函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   var num = 15</span><br><span class="line">var f1=function(x)&#123;</span><br><span class="line">  if(x&gt; num)&#123;</span><br><span class="line">      console.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 加上void 变成立即执行函数</span><br><span class="line">void function(fn)&#123;</span><br><span class="line"> var num=100;</span><br><span class="line"> fn(30)</span><br><span class="line">&#125;(f1)    //30</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解释：这里首先有一个立即执行函数，直接执行，实参为f1对应的匿名方法，将之传给fn，在执行这个匿名函数，在执行这个匿名函数时，访问的num就是最上面的全局变量num（15）了</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之毒瘤</title>
    <url>/2020/06/03/jS%E7%BC%BA%E7%82%B9/</url>
    <content><![CDATA[<h3 id="JS毒瘤"><a href="#JS毒瘤" class="headerlink" title="JS毒瘤"></a>JS毒瘤</h3><ul>
<li><p><strong>全局变量</strong>:应尽可能的少用和不用全局变量，全局变量很难以管理，因为它可以在任何时间在程序的任意部分进行修改，降低了程序的可靠性</p>
</li>
<li><p><strong>作用域</strong>：js中代码块中变量作用域不止作用在此代码块中，这是一个极其危险的特性</p>
</li>
<li><p><strong>自动插入分号</strong>： JS有一个自动修复机制，它试图通过自动插入分号来修正有缺损的程序。但是，千万别指望它，它可能会掩盖/导致更严重的错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return </span><br><span class="line">&#123;</span><br><span class="line">    status:ture;</span><br><span class="line">&#125;;</span><br><span class="line">//看去来是要返回一个包含status属性的对象，但自动插入分号会让它变成返回undefined</span><br><span class="line">//改正</span><br><span class="line">return&#123;</span><br><span class="line">     status:ture;</span><br><span class="line">&#125;</span><br><span class="line">//最好将&#123;写到最好一句的最后</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>typeof运算符</strong> 返回一个识别其类型的字符串</p>
<ol>
<li><p><code>typeof null</code> 返回的是’object’,typeof不能检测除null，只能通过一些辅助手段判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myval=null;</span><br><span class="line">if (myval &amp;&amp; typeof myval === &apos;object&apos;)&#123;&#125;//..</span><br><span class="line">//或者</span><br><span class="line">if(myval === null)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>typeof array</code> 返回的是’object’,不是数组类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//通过构造函数</span><br><span class="line">if(array.constructor.toString().indexOf(&quot;Array&quot;) !== -1)</span><br><span class="line">//通过数组方法</span><br><span class="line">Array.isArray(array);</span><br><span class="line">//通过原型prototype+isPrototypeOf()</span><br><span class="line">Array.prototype.isPrototypeOf(array)</span><br><span class="line">//isPrototypeOf()函数：用于指示对象是否存在一个对象的原型链中。如果存在则返回true。该方法属于Object对象，由于所有的对象都继承了Object的对象实例。因此几乎所有的实例方法都可以使用该方法。如果array的原型链中存在Array对象，就会返回true，也就说明array属于数组类型</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><code>parseInt()</code> 将字符串转为整数的方法</p>
<ol>
<li>遇到非数字时会停止解析 parseInt(“16”)和parseInt(“16 xx”)返回结果都是number型的16</li>
<li>但是如果字符串的第一个字符是0，那么该字符串会基于八进制而非十进制来求值。在八进制中8和9不是数字，所以解析到8和9时会停止解析。<br>parseInt(“08”)和parseInt(“09”)都是返回0，这种错误会导致解析日期和时间时出现问题，可以在parseInt(),加上第二个参数parseInt(“08”，10)，这样可以解决问题<blockquote>
<p>建议总是加上这个参数</p>
</blockquote>
</li>
</ol>
</li>
<li><p><code>+</code>运算符</p>
<ol>
<li>如果两边都是字符串，会连接起来</li>
<li>若一边是空字符串，一边是数字，则会把数字转换为字符串进行连接</li>
<li>若想要做加法运算，请保证两个运算数都是number</li>
</ol>
</li>
<li><p>浮点数</p>
<ul>
<li>0.1+0.2不等于0.3</li>
</ul>
</li>
<li><p><code>NaN</code> 不是一个数字的意思</p>
<ul>
<li>typeof NaN === ‘number’ //true</li>
<li><code>isNaN()</code> 可以判断是否是NaN</li>
<li>判断一个值是否可以用作数字的最好方法就是<code>isFinite()</code>函数,因为它会筛出NaN和Infinity，但它会试图把运算数转为一个数字。可以自定一个函数判断是否是一个数字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var isNumber=function(value)&#123;</span><br><span class="line">   return typeof value === &apos;number&apos; &amp;&amp; isFinite(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>伪数组</p>
<ul>
<li><p>JS中的数组不是真正的数组</p>
</li>
<li><p>typeof不能判定是数组还是对象</p>
</li>
<li><p>判断是一个数组的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    //通过构造函数</span><br><span class="line">    if(array.constructor.toString().indexOf(&quot;Array&quot;) !== -1)</span><br><span class="line">    //通过数组方法</span><br><span class="line">    Array.isArray(array);</span><br><span class="line">    //通过原型prototype+isPrototypeOf()</span><br><span class="line">    Array.prototype.isPrototypeOf(array)</span><br><span class="line">    ``` </span><br><span class="line">    &gt; `isPrototypeOf()`函数：用于指示对象是否存在一个对象的原型链中。如果存在则返回true。该方法属于Object对象，由于所有的对象都继承了Object的对象实例。因此几乎所有的实例方法都可以使用该方法。如果array的原型链中存在Array对象，就会返回true，也就说明array属于数组类型</span><br><span class="line"></span><br><span class="line">+ 假值（可以当成false的值）</span><br><span class="line">    1. 0（Number）</span><br><span class="line">    2. NaN（Number）</span><br><span class="line">    3. &apos;&apos;(String)</span><br><span class="line">    4. false(Boolean)</span><br><span class="line">    5. null(Object)</span><br><span class="line">    6. undefined(Undefined)</span><br><span class="line">+ `hasOwnProperty()`</span><br><span class="line">   + hasOwnProperty方法可以用来做成一个过滤器去避开for in语句的一个隐患。但这是一个方法，不是一个运算符，在任何对象中都可以进行赋值</span><br></pre></td></tr></table></figure>

<p>var name;<br>var obj.hasOwnProperty=null;  //地雷<br>for(name in obj){<br> if (obj.hasOwnProperty(name)){  //踩雷</p>
<pre><code>console.log(name+&quot;:&quot;+obj[name]);</code></pre><p> }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### JS糟粕</span><br><span class="line">   1. 永远不要使用`==`和`!=`,必须使用`===`和`!==`</span><br><span class="line">      + 因为使用==时可能进行类型强转，由于==还具有传递性（x==y,y==z =&gt;x==z）</span><br><span class="line">#### 介绍eval()函数</span><br><span class="line">eval函数就是通过解析参数，进而通过JS编译器，来执行解析后的语句。相当于一个js语言的执行器，能把其中的参数按照JS的语法进行解析并执行</span><br><span class="line">   1. `eval(s)`</span><br><span class="line">   2. 当参数时数字或者Function类型时，直接返回该数字和该Function</span><br><span class="line">   3. 当参数时字符串时，JS会解析该字符串，并转换为相应的JS代码，执行该代码，并返回执行结果</span><br><span class="line">   4. 若参数是JSON格式（此时的JSON外面要加一对小括号），该方法返回该JSON</span><br><span class="line">   5. 如果参数s是字符串，并且字符串中是语句或语句块，则eval()方法会执行该语句或语句块，并且返回undefined</span><br><span class="line">   6. 如果试图覆盖eval属性或将eval()方法赋给另外一个属性，并通过该属性调用它，会出现EvalError 异常</span><br><span class="line">   7. 给了被求值的文本太多的权力，降低了语言的性能</span><br><span class="line"></span><br><span class="line">#### 代码块</span><br><span class="line">   + JS中，代码块并没有作用域</span><br><span class="line">   + JSLint期望只有function、if、switch、while、for、do、和try语句使用代码块，有一个例外就是在else或for in语句中的if语句可以不使用代码块</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>var i=0;<br>for(i=0;i&lt;5;i++){<br>var x=8;<br>}<br>console.log(x); //8<br>```</p>
<blockquote>
<p>像for这样的代码块中声明的变量在其它地方也能调用，没有属于自己的作用</p>
</blockquote>
</li>
<li><p><strong>最好不要使用++（递增）和–（递减），这是导致病毒和其它安全威胁的第二大元凶（第一个是架构缺陷）</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>博客Markdown的写法</title>
    <url>/2020/01/17/my-second-blog/</url>
    <content><![CDATA[<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
注意：#后面要加空格 一级标题下面有一条横线 正常是需要闭合的这些标签</code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul>
<li><p>无序列表</p>
<blockquote>
<p>* 1<br>* 2<br>* 3<br>* 4</p>
<blockquote>
<p>注意 在*后面也要一个空格 用在线编辑器看实际上是转换承了 ul&gt;li</p>
</blockquote>
</blockquote>
</li>
<li><p>有序列表</p>
<blockquote>
<ol>
<li>列表一</li>
<li>列表二</li>
<li>列表三<blockquote>
<p>注意：数字后面必须是英文的点，有序列表的序号是根据第一行列表的数字顺序来的</p>
</blockquote>
</li>
</ol>
</blockquote>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>比如说，你想对某个部分的内容做一些说明或者引用等，可以使用&gt;<br>‘&gt;’</p>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>使用四个缩进空格 表示代码块</p>
<h4 id="加强的代码块"><a href="#加强的代码块" class="headerlink" title="加强的代码块"></a>加强的代码块</h4><p>支持四十一种编程语言的语法高亮显示，行号显示，使用&lt;!–￼0–&gt;</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之事件等等</title>
    <url>/2020/06/03/vuenote1/</url>
    <content><![CDATA[<p>由于hexo采用的编辑器不同，里面的两个大括号我都用一个代替</p>
<h3 id="之前学的总结"><a href="#之前学的总结" class="headerlink" title="之前学的总结"></a>之前学的总结</h3><ul>
<li><p>如何定义一个Vue代码结构</p>
</li>
<li><p>插值表达式 和 V-text</p>
</li>
<li><p>v-cloak 解决闪烁问题</p>
</li>
<li><p>v-bind 缩写:  绑定标签，使其中间的值变成一个变量，在vue实例的data对象中</p>
</li>
<li><p>v-on 事件绑定标签 在实例中是在methods对象中 缩写是 @</p>
</li>
<li><p>vue会监听自生data数据，若data数据发生改变，则页面上的data也会刷新</p>
<ul>
<li>程序员只需要关心数据，不需要关注如何渲染数据</li>
</ul>
<p>注意：在vue实例中想要调用data上的数据或调用methods上的方法，必须通过this.数据属性名或this.方法名来进行访问</p>
<h4 id="改造箭头函数"><a href="#改造箭头函数" class="headerlink" title="改造箭头函数"></a>改造箭头函数</h4><p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setInterval(function()&#123;&#125;,1000)可以改造成 setInterval(()=&gt;&#123;&#125;,1000)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="箭头函数的作用"><a href="#箭头函数的作用" class="headerlink" title="箭头函数的作用"></a>箭头函数的作用</h4><ul>
<li>可以使得 内部this指向外部this</li>
</ul>
<h3 id="事件修饰符-修饰符是可以串联的"><a href="#事件修饰符-修饰符是可以串联的" class="headerlink" title="事件修饰符(修饰符是可以串联的)"></a>事件修饰符(修饰符是可以串联的)</h3><ul>
<li><p><code>stop</code> 阻止冒泡：<code>冒泡</code>是指在原生机制中由于包裹关系，最里面的触发click事件时，外面的也会触发事件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;box&quot; @click=&quot;big&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click.stop=&quot;small&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样可以阻止原生冒泡</p>
<ul>
<li><code>prevent</code> 事件的默认行为 使用.prevent 来阻止默认行为 默认行为有</li>
</ul>
<ol>
<li>link中的默认行为是点击跳转到链接地址</li>
<li>表单中的submit默认行为是提交表单</li>
</ol>
<ul>
<li><code>capture</code> 添加事件侦听器时使用事件捕获模式 例如</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; @click.capture=&quot;big&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;small&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认是使用冒泡模式，而一旦使用了capture就会变成从外到里开始捕获事件<br>注意：是给外层div加上.capture</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>self</code> 阻止冒泡或者捕获来执行的事件，只有点击当前元素时，才能触发事件处理函数，例如</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; @click.self=&quot;big&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;small&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有点击box才能触发big事件，点击small对上层的box没有影响</p>
</blockquote>
</li>
<li><p><code>once</code> 只能触发一次事件 例如</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkclick&quot;&gt;baidu&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：防止了a标签的默认事件（即进入链接地址），但由于once的存在只会阻止一次并执行一侧linkclick事件，第二次就会执行默认事件（即进入链接地址）</p>
</blockquote>
</li>
</ul>
<h3 id="Vue指令之v-model"><a href="#Vue指令之v-model" class="headerlink" title="Vue指令之v-model"></a>Vue指令之v-model</h3><h4 id="v-model指令实现双向数据绑定"><a href="#v-model指令实现双向数据绑定" class="headerlink" title="v-model指令实现双向数据绑定"></a><code>v-model</code>指令实现双向数据绑定</h4><ul>
<li>表单元素双向绑定</li>
<li>v-bind只能绑定属性，实现数据的单向绑定（从Model自动绑定到View） <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>v-model 不需要像v-bind一样 v-bind:value=”msg”</p>
<ul>
<li>v-model既可以实现从M自动绑定到V，也可以实现从V自动绑定到M中<br>注意：只能运用到表单元素中 表单元素有： input(radio、text、address、email) select checkbox textarea等</li>
</ul>
</blockquote>
<h4 id="Javascript中的eval-String-方法"><a href="#Javascript中的eval-String-方法" class="headerlink" title="Javascript中的eval(String)方法"></a>Javascript中的eval(String)方法</h4><ul>
<li><p>投机取巧方式，正式开发中尽量少用</p>
</li>
<li><p>参数是一个字符串</p>
</li>
<li><p>该函数的执行过程是解析字符串的过程</p>
</li>
<li><p>返回结果是解析字符串并计算相应的语句，返回一个值（如果有的话）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result=eval(&apos;3&apos;+&apos;*&apos;+&apos;5&apos;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行结果是 result=15</p>
</blockquote>
</li>
</ul>
<h3 id="Vue指令之v-for"><a href="#Vue指令之v-for" class="headerlink" title="Vue指令之v-for"></a>Vue指令之v-for</h3><ul>
<li><p>循环遍历普通数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in list&quot;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">data:&#123;list:[1,2,3,4,5]&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若要拿到索引,则： v-for=”(item,index) in list” 此时的index为for循环的索引</p>
</blockquote>
</li>
<li><p>循环遍历对象数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in objlist&quot;&gt;&#123;item.id&#125;+&#123;item.name&#125;&lt;/li&gt;</span><br><span class="line"> data:&#123;</span><br><span class="line">     objlist:[</span><br><span class="line">         &#123;id:1,name:&apos;xixi&apos;&#125;,</span><br><span class="line">         &#123;id:2,name:&apos;haha&apos;&#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(val,key) in obj&quot;&gt;&#123;val&#125; +&#123;key&#125;&lt;/li&gt;</span><br><span class="line">data:&#123;</span><br><span class="line">    obj:&#123;</span><br><span class="line">        id:1,</span><br><span class="line">        name:&apos;tony&apos;,</span><br><span class="line">        address:&apos;beijing&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在遍历对象身上的（val，key）时，再第三个位置还有一个索引， 索引永远在最后一位 例如（val,key，index）,(item,index)，索引用的不多</p>
</blockquote>
</li>
<li><p>迭代数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;count in 10&quot;&gt;&#123;count&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以直接循环迭代数字，直接将数字写在in后面，表示迭代多少次 从1开始</p>
</blockquote>
<h3 id="v-for使用注意事项"><a href="#v-for使用注意事项" class="headerlink" title="v-for使用注意事项"></a>v-for使用注意事项</h3><ol>
<li>在2.2.0+的版本里，当在组件中使用v-for时或者在一些特殊情况中，如果v-for有问题，必须在使用v-for的同时，指定唯一的number或者string类型的:key值。种种情况下，<code>key</code>是必须的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in objlist&quot; v-bind:key=&quot;item.id&quot;&gt;</span><br><span class="line"> &#123;item.id&#125;+ &#123;item.name&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"> data:&#123;</span><br><span class="line">      objlist:[</span><br><span class="line">          &#123;id:1,name:&apos;xixi&apos;&#125;,</span><br><span class="line">          &#123;id:2,name:&apos;haha&apos;&#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<blockquote>
<p>需要使用<code>v-bind:key=&quot;item.id&quot;</code>来绑定key，这样才能使得这一项是唯一确定的<br>这个 key属性值只能使用number或者string,必须使用v-bind 属性绑定的形式，指定key的值</p>
</blockquote>
<h3 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之v-if和v-show</h3><ul>
<li>使用<code>v-if</code>和<code>v-Show</code>时展示的效果是一样的，使其元素可见和不可见</li>
<li>查看原代码时，会发现使用v-if时 若v-if=”flag” flag= false，此时这个元素相当于没有<pre><code>而使用v-show时，若 v-show=&quot;flag&quot; flag=false，此时元素并没有消失，只是style=&quot;dispaly=none&quot;</code></pre></li>
<li>v-if   特点：每次都会重新创建或删除DOM元素；<br>v-show 特点：每次不会重新进行DOM的创建或删除</li>
<li>v-if有较高的切换性能消耗，v-show有较高的初始渲染消耗</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之样式</title>
    <url>/2020/06/03/vue2node/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="Vue中使用样式"><a href="#Vue中使用样式" class="headerlink" title="Vue中使用样式"></a>Vue中使用样式</h3><h4 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h4><ol>
<li><p>数组 直接传递数组 （了解就行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.red &#123;color:red&#125; &lt;style&gt;</span><br><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;]&quot;&gt;这是一个标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：使用数组时，要用v-bind绑定class并且在class里面的数组，必须用字符串包裹起来，这时不需要在Vue中有data</p>
</blockquote>
</li>
<li><p>在数组里面使用三元表达式（在Vue中需要声明数据）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.red &#123;color:red&#125; .active &#123;letter-spacing: 0.5em&#125;&lt;style&gt;</span><br><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;,flag?&apos;active&apos;:&apos;&apos;]&quot;&gt;这是一个标题&lt;/h1&gt;</span><br><span class="line">  var vm =new Vue(&#123;</span><br><span class="line">     el:&quot;#app&quot;,</span><br><span class="line">     data:&#123;</span><br><span class="line">         flag:true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时的三元表达式可以借用data中的数据进行，但还是需要将class绑定属性 v-bind</p>
</blockquote>
</li>
<li><p>在数组里面使用对象可以代替三元表达式 例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.red &#123;color:red&#125; .active &#123;letter-spacing: 0.5em&#125;&lt;style&gt;</span><br><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;,&#123;&apos;active&apos;:flag&#125;]&quot;&gt;这是一个标题&lt;/h1&gt;</span><br><span class="line">  var vm =new Vue(&#123;</span><br><span class="line">     el:&quot;#app&quot;,</span><br><span class="line">     data:&#123;</span><br><span class="line">         flag:true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>直接使用对象（前提是使用v-bind绑定class属性对象的属性可以带引号也可不带，属性的值是一个标识符） 例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.red &#123;color:red&#125; .active &#123;letter-spacing: 0.5em&#125;&lt;style&gt;</span><br><span class="line">&lt;h1 :class=&quot;&#123;red: true, active: false&#125;&quot;&gt;这是一个标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>注意：直接使用对象时，:class={} 这里是对象的括号，且里面可用字符串包裹，也可不用</p>
</blockquote>
</li>
</ol>
<h4 id="Vue中绑定内联样式（style）"><a href="#Vue中绑定内联样式（style）" class="headerlink" title="Vue中绑定内联样式（style）"></a>Vue中绑定内联样式（style）</h4><ol>
<li><p>直接通过v-bind绑定style</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style=&quot;&#123;color:&apos;red&apos;,&apos;font-size&apos;:200px&#125;&quot;&gt;这是一个标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将样式对像，定义到data中，并直接应用到:style中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 :style=&quot;Objstyle&quot;&gt;这是一个标题&lt;/h1&gt;</span><br><span class="line">  data:&#123;Objstyle:&#123;color:&apos;red&apos;,&apos;font-size&apos;:200px&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue简介</title>
    <url>/2019/07/19/vue%E7%AE%80%E4%BB%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul>
<li>Vue.js是目前最火的前端框架，react是最流行的前端框架</li>
<li>Vue.js是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于和第三当库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</li>
<li>在vue中核心的概念是让用户不再操作DOM元素，解放了用户的双手，让程序员关注业务逻辑</li>
</ul>
<h3 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h3><ul>
<li>框架是一套完整的解决方案；对项目的侵入性较大；项目若要更换框架，则需要重新构建整个项目。<ul>
<li>node中的express1</li>
</ul>
</li>
<li>库也可以成为插件（提供的是一个小功能），对项目的侵入性校，如果某个库无法完成某些需求，可以很容易切换到其他库实现需求。<h3 id="Node（后端）中的mvc与前端中的mccm之间的区别"><a href="#Node（后端）中的mvc与前端中的mccm之间的区别" class="headerlink" title="Node（后端）中的mvc与前端中的mccm之间的区别"></a>Node（后端）中的mvc与前端中的mccm之间的区别</h3></li>
</ul>
<ul>
<li><p>mvc是后端的分层开发概念</p>
</li>
<li><p>MVVM是前端视图层的概念，主要关注视图层的分离，mvvm把前端的视图层分为了三部分：<code>Model</code>、<code>View</code>、<code>VM ViewModel</code></p>
</li>
<li><p>为什么有了MVC还要有MVVM</p>
</li>
<li><p><strong>MVC结构</strong>：第一：app.js(项目的入口地址，一切的请求，都要先进入这里进行处理。注意：app.js没有路由分发的功能，需要调用router.js模块进行路由分发)；第二：router.js(功能单一，只负责分发路由，不负责具体逻辑业务的处理)；第三：Controller(业务处理层，功能单一，只负责处理业务，不负责处理数据的CRUD)；第四：Model（职能单一，只负责操作数据库，执行sql语句，运行数据的CRUD）</p>
<ul>
<li>通过View视图层给app.js(每当用户操作了界面，若需要进行业务的请求，就会通过网络请求，发送给后端的服务器，此时，我们这个请求，就会被后端的App.js监听到)</li>
</ul>
</li>
<li><p><strong>MVVM结构</strong>：是在前端的View视图层进行划分的。将每个页面都分为M、V和VM。其中，VM是整个MVVM的核心，应为VM是V和M见的调度者。</p>
<ol>
<li>M中保存的是每个页面中单独的数据</li>
<li>V中页面中静态的HTML结构</li>
<li>VM是一个调度者，分割了V和M；V中想要存取数据，通过VM来得到；M中想存取<br>数据，只能通过VM</li>
<li>前端页面中使用MVVM的思想，是为了让我们开发更加方便，<strong>MVVM提供的数据的双向绑定</strong>，这是由VM提供的<blockquote>
<p>涵哥说过：你真棒</p>
</blockquote>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>同源策略以及跨域问题的解决方案</title>
    <url>/2020/08/18/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h3 id="同源策略以及跨域问题的解决方案"><a href="#同源策略以及跨域问题的解决方案" class="headerlink" title="同源策略以及跨域问题的解决方案"></a>同源策略以及跨域问题的解决方案</h3><p>同源策略时互联网安全的重要基础，目的是为了保证用户信息的安全，防止恶意网站窃取数据。</p>
<p>同源策略会阻止非同源的内容交互（比如你浏览一个网站，同时打开了另一个不相干的网站，但那个网站像访问你的这个网站的Cookie等相关信息，你说可不可怕），所以同源策略是浏览器最核心也最基本的安全功能。</p>
<p>同源的具体表现</p>
<ol>
<li>同一个协议</li>
<li>同一个域名</li>
<li>同一个端口号<br>有一个不同，就算跨域</li>
</ol>
<table>
<thead>
<tr>
<th>当前页面url</th>
<th>被请求页面url</th>
<th>是否跨域</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><code>http://www.test.com/</code></td>
<td><code>http://www.test.com/index.html</code></td>
<td>否</td>
<td>同源（协议、域名、端口号相同）</td>
</tr>
<tr>
<td><code>http://www.test.com/</code></td>
<td><code>https://www.test.com/index.html</code></td>
<td>跨域</td>
<td>协议不同（http/https）</td>
</tr>
<tr>
<td><code>http://www.test.com/</code></td>
<td><code>http://www.baidu.com/</code></td>
<td>跨域</td>
<td>主域名不同（test/baidu）</td>
</tr>
<tr>
<td><code>http://www.test.com/</code></td>
<td><code>http://blog.test.com/</code></td>
<td>跨域</td>
<td>子域名不同（www/blog）</td>
</tr>
<tr>
<td><code>http://www.test.com:8080/</code></td>
<td><code>http://www.test.com:7001</code>/</td>
<td>跨域</td>
<td>端口号不同（8080/7001）</td>
</tr>
</tbody></table>
<p>非同源的限制</p>
<ol>
<li>不能读取非同源网页的Cookie、LocalStorage、IndexedDB</li>
<li>不能接触非同源网页的DOM</li>
<li>不能向非同源地址发送AJAX请求</li>
</ol>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li><code>JSONP</code>(json with padding)<br>JSONP原理： 首先不同源的网站可以访问script标签中的src属性，所以JSONP利用这个特性开发出来可以跨域的方式。<br>利用<code>script</code>元素的开放策略，网页可以得到从其他来源动态产生的JSON数据。<br>服务器接受到请求后，将数据放在一个指定名字的回调函数的参数位置传回来，这个步骤需要服务器的支持<br>使用JSONP模式请求数据的时候返回的是一段可执行的JS代码<blockquote>
<p>由于JSONP是将信息包装到src，通过资源访问来进行跨域，它的信息都在发送头中，所以JSONP只支持get请求</p>
</blockquote>
</li>
</ol>
<p>原生JS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://test.com/getdata?callback=fn"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">//向服务器test.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//处理服务器返回回调函数的数据</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>) </span>&#123;        </span><br><span class="line">         alert(data.msg);     </span><br><span class="line">    &#125; </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>fn是客户端注册的回调函数，目的是获取跨域服务器上的json数据后，对数据进行在处理</p>
</blockquote>
<p>jQuery ajax</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.test.com:8080/getdata'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"handleCallback"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.domain2.com:8080/getdata'</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'handleCallback'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>至今还是没搞明白如何在服务器端配合客户端</p>
</blockquote>
<p>参考以下代码（后端配合）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后端</span></span><br><span class="line">String jsonpCallback = request.getParameter(<span class="string">"jsonp"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//构造回调函数格式jsonp(数据)</span></span><br><span class="line">resp.getWriter().println(jsonp+<span class="string">"("</span>+jsonObject.toJSONString()+<span class="string">")"</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只知道后端要返回一个类似于 callback([{“id”:1,”money”:100.00,”producer”:”caohan”,”consumer”:”曹涵”},{“id”:8,”money”:520.00,”producer”:null,”consumer”:”曹涵”},{“id”:9,”money”:1314.00,”producer”:null,”consumer”:”曹涵”}])</p>
</blockquote>
<ol start="2">
<li><code>CORS</code><br>CORS(Cross-Origin Resource Sharing)是跨域资源分享，是<strong>解决跨域ajax的根本解决方案</strong><ul>
<li><strong>普通跨域请求：只需前端设置Access-Control-Allow-Origin</strong></li>
<li><strong>带有cookie的跨域请求：前后端都需要进行设置</strong></li>
</ul>
</li>
</ol>
<p>【前端设置】<br>原生</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain2.com:8080/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>jQuery</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   url: <span class="string">'http://www.test.com:8080/login'</span>,</span><br><span class="line">   type: <span class="string">'get'</span>,</span><br><span class="line">   data: &#123;&#125;,</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>vue-resource</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.http.options.credentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>axios</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>【服务器端设置】<br>服务器端对于CORS的支持，主要是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。<br>java后台</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Luckymoney&gt; <span class="title">list</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">         response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">         <span class="keyword">return</span> luckymonyRepository.findAll();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>springboot</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//直接加入注解</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端、网络</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之对象说明符</title>
    <url>/2020/06/02/%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="对象说明符（ES6中可以理解为结构解析）"><a href="#对象说明符（ES6中可以理解为结构解析）" class="headerlink" title="对象说明符（ES6中可以理解为结构解析）"></a>对象说明符（ES6中可以理解为结构解析）</h3><p>有时候函数中需要传的参数过多，容易在调用时搞混这些参数的顺序，这时候就可以时使用对象说明符来解决。将形参写成一个对象的形式，实参叶根据这个形式进行传参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var foo=function(&#123;</span><br><span class="line">  &apos;firststr&apos;:str,</span><br><span class="line">  &apos;secondstr&apos;:name</span><br><span class="line">&#125;)&#123;</span><br><span class="line">  console.log(str+ &quot;-----&quot;+ name );</span><br><span class="line">&#125;</span><br><span class="line">foo(&#123;&apos;firststr&apos;:&quot;你好啊&quot;,&apos;secondstr&apos;:&apos;JS&apos;&#125;);  //你好啊-----JS</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算小技巧</title>
    <url>/2020/07/31/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h3 id="位运算小技巧"><a href="#位运算小技巧" class="headerlink" title="位运算小技巧"></a>位运算小技巧</h3><p>   js中有一个著名bug，0.1+0.2 ！== 0.3,因为精度的问题，导致所有的浮点运算都是不安全的。<br>   js中完全套用了java的位运算符，包括按位与<code>&amp;</code>、按位或<code>|</code>、按位异或<code>^</code>、按位非<code>~</code>、左移<code>&lt;&lt;</code>、带符号的右移<code>&gt;&gt;</code>和用<code>0</code>补足的右移<code>&gt;&gt;&gt;</code>。这套运算符争对的是整数，但在js内部，所有的数字都是以双精度浮点数进行保存。<br>如果要使用位运算符，js会将数字先转为整数再进行运算，这样就降低了运算速度</p>
<h4 id="1-使用左移运算符迅速得出2的次方"><a href="#1-使用左移运算符迅速得出2的次方" class="headerlink" title="1. 使用左移运算符迅速得出2的次方"></a>1. 使用左移运算符迅速得出2的次方</h4><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&lt; 2  //4 ,即1乘2的2次方</span><br><span class="line">1 &lt;&lt; 10  //1024</span><br></pre></td></tr></table></figure></code></pre><h4 id="2-使用-切换变量0或1（异或规则：相同为0，相异为1）"><a href="#2-使用-切换变量0或1（异或规则：相同为0，相异为1）" class="headerlink" title="2. 使用^切换变量0或1（异或规则：相同为0，相异为1）"></a>2. 使用<code>^</code>切换变量0或1（异或规则：相同为0，相异为1）</h4><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var toggle=0;</span><br><span class="line">toggle ^=1; //1,当toggle为1时，变为0</span><br></pre></td></tr></table></figure></code></pre><h4 id="3-使用-amp-判断奇偶性"><a href="#3-使用-amp-判断奇偶性" class="headerlink" title="3. 使用&amp;判断奇偶性"></a>3. 使用<code>&amp;</code>判断奇偶性</h4><ul>
<li><p>偶数 &amp; 1 =0</p>
</li>
<li><p>奇数 &amp; 1 =1</p>
<h4 id="4-使用-将一个值转化为布尔值"><a href="#4-使用-将一个值转化为布尔值" class="headerlink" title="4. 使用!!将一个值转化为布尔值"></a>4. 使用<code>!!</code>将一个值转化为布尔值</h4><h4 id="5-使用-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-来取整"><a href="#5-使用-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-来取整" class="headerlink" title="5. 使用~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、| 来取整"></a>5. 使用~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、| 来取整</h4></li>
<li><p>相当于使用了Math.floor()，向下取整</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~11.71   //11</span><br><span class="line">11.71 &gt;&gt; 0 //11</span><br><span class="line">11.71 &lt;&lt; 0 //11</span><br><span class="line">11.71 | 0 //11</span><br><span class="line">11.71 &gt;&gt;&gt; 0 //11</span><br></pre></td></tr></table></figure>

<blockquote>
<p>js引擎察觉到使用位运算，会将浮点型转换为整型;&gt;&gt;&gt; 不可以对负数取整;Math.round()为四舍五入</p>
</blockquote>
<h4 id="6-使用-完成值交换"><a href="#6-使用-完成值交换" class="headerlink" title="6. 使用^完成值交换"></a>6. 使用^完成值交换</h4><p>在es6的解构赋值出来之前，这种当时会更快（但必须是整数）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//before</span><br><span class="line">let a=7, b=1;</span><br><span class="line">let temp=a;a=b;b=temp;    //借助临时变量</span><br><span class="line">b=[a,a=b][0];             //借助数组</span><br><span class="line">&#123;                         //借助数轴，即两数之间的距离进行交换</span><br><span class="line">  a=a-b;</span><br><span class="line">  b=a+b;</span><br><span class="line">  a=b-a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//after</span><br><span class="line">let a=7,b=1;</span><br><span class="line">a^=b;</span><br><span class="line">b^=a;</span><br><span class="line">a^=b;                    //a=1,b=7</span><br><span class="line">//es6</span><br><span class="line">[a,b]=[b,a];</span><br></pre></td></tr></table></figure>

<h4 id="7-使用-判断符号是否相等"><a href="#7-使用-判断符号是否相等" class="headerlink" title="7. 使用^判断符号是否相等"></a>7. 使用^判断符号是否相等</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(a^b)&gt;=0;   //true为相同符号，false为相反符号</span><br></pre></td></tr></table></figure>

<ul>
<li><p>因为两数进行异或，最高位是符号位，相同为0，相异为1，所以相同的话，结果为正数，相反的，结果为负数</p>
<h4 id="8-使用-来检查数字是否不相等"><a href="#8-使用-来检查数字是否不相等" class="headerlink" title="8. 使用^来检查数字是否不相等"></a>8. 使用^来检查数字是否不相等</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//before</span><br><span class="line">if(a!==3)&#123;&#125; </span><br><span class="line">//after</span><br><span class="line">if(a^3)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>原理：如果两数不相等，那么总会有一个位不同，结果就不会是0</p>
<h4 id="9-使用-amp-来判断一个数是否为2的整数幂（6不是，8是）"><a href="#9-使用-amp-来判断一个数是否为2的整数幂（6不是，8是）" class="headerlink" title="9. 使用&amp;来判断一个数是否为2的整数幂（6不是，8是）"></a>9. 使用&amp;来判断一个数是否为2的整数幂（6不是，8是）</h4></li>
<li><p>n &amp; (n-1) ,若结果是0，则是整数幂，反之则不是</p>
</li>
<li><p>解析： 若一个数是整数次幂，则写成二进制会是，只有一个位置上有1（设为index），其他位置都为0，<br>此时n-1的二进制则是index-1的位置到第一位都是1，此时按位&amp;，所有位置都为0，结果就为0</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之正则表达式</title>
    <url>/2020/05/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则表达式学习"><a href="#正则表达式学习" class="headerlink" title="正则表达式学习"></a>正则表达式学习</h2><p>  正则表达式是一个帮助处理和<strong>匹配复杂字符串</strong>的工具,regular expression(RegEx)</p>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol>
<li>灵活，逻辑性和功能性非常强</li>
<li>可以迅速用极简单的方式做到字符串的复杂控制</li>
<li>对初学者不友好，比较晦涩难懂</li>
</ol>
<h4 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a>常见用法：</h4><ol>
<li>邮箱验证</li>
<li>密码强度验证</li>
<li>身份证号验证</li>
<li>用户名验证</li>
<li>提取数字</li>
</ol>
<h4 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合[]"></a>字符集合[]</h4><p> 集合set是一对方括号[]内的一组字符，用来代表整个字符中的任意一个<br> 例如：</p>
<blockquote>
<p><code>[abc]</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定字符（a，b或c）之一<br><code>[a-z]</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示任何一个小写字母<br><code>[^abc]</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^ 表示否的意思，表达了除a，b，c外的任意字符<br><code>[0246]</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代表 0，2，4，6的任意一个<br><code>[0-9]</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代表 0到9的任意一个数字<br><code>[a-zA-Z]</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任何一个大小写字母<br><code>[+]</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在集合中 +、*、|、()、$、{}都没有特殊含义，仅代表普通字符匹配<br><code>[0-9]+</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的加代表连续多个</p>
</blockquote>
<h4 id="常见通配符（核心）"><a href="#常见通配符（核心）" class="headerlink" title="常见通配符（核心）"></a>常见通配符（核心）</h4><p>通配符是一种特殊字符，一般指的是反斜杠\后面紧跟的一些特殊标识符，用来<strong>指代某些字符集合</strong></p>
<ul>
<li><code>\d</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代表阿拉伯数字（只能匹配一个字符）</li>
<li><code>\D</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代表除了阿拉伯数字外的所有字符，可以理解为[^\d]</li>
<li><code>\s</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;空白字符</li>
<li><code>\S</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除空白字符外的所有字符</li>
<li><code>\w</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任何单词字符（字母、数字、汉字、下划线_字符）</li>
<li><code>\W</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回一个匹配项，其中字符串不包含任何单词字符<br><strong>不常用：</strong><ul>
<li><code>\A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串的开头</li>
<li><code>\Z</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串的末尾</li>
<li><code>\b</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回指定字符位于单词的开头或者末尾的匹配项</li>
<li><code>\B</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不在单词的开头和结尾处</li>
</ul>
</li>
</ul>
<h4 id="元字符（复杂重要）"><a href="#元字符（复杂重要）" class="headerlink" title="元字符（复杂重要）"></a>元字符（复杂重要）</h4><p> 在正则表达式中具有特殊含义的字符，具有<strong>很高的优先级</strong>。例如<code>[]</code>、<code>\</code>、<code>+</code>都是元字符<br> 在<strong>元字符中<code>\</code>的优先级最高</strong>,其次为各种括号</p>
<ul>
<li><p><code>\</code> 代表对随后的通配符进行转义，因此需要用<code>\\</code>表示<code>\</code>本身</p>
<blockquote>
<p>若反斜杠后面没有通配符，则反斜杠原样输出，就不再转义</p>
</blockquote>
</li>
<li><p><code>[]</code> 用于限定字符集合</p>
<blockquote>
<p>注意：使用<code>[]</code>时，再[]中间的特殊字符如.+?*:-等等都是看作普通字符，但若要将\[]看作普通字符，需要进行转义，即使用\\表示\，使用\[来表示[</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[\w,]+</span><br><span class="line">//代表检索所有连续的单词字符或者连续的,  在[]中只能匹配一个字符</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.</code> 英文的小数点，表示除换行符之外的<strong>任何一个字符</strong></p>
</li>
<li><p><code>*</code> 代表前面的字符可以出现0次或多次</p>
</li>
<li><p><code>+</code> 代表一个或多个<strong>连续</strong>匹配的字符</p>
</li>
<li><p><code>?</code> 非贪婪模式，表示匹配前面的字符0次或一次</p>
</li>
<li><p><code>+?</code> 将搜索模式从贪婪模式改为非贪婪模式</p>
<blockquote>
<p>如果能匹配到，则匹配一个，不会匹配多个</p>
</blockquote>
</li>
<li><p><code>{}</code> 表示的是前面表达式的确切的出现次数</p>
<blockquote>
<p>\d{2} 表示 匹配两个数字<br>\d{2,4} 表示 匹配2-4个数字，2，3，4个<br>\d{2,} 表示2位到无限位</p>
</blockquote>
</li>
<li><p><code>|</code> 管道符 代表选择其中一个，一般按顺序选择，若前面的已被匹配，就不会匹配后面的</p>
</li>
<li><p><code>()</code> 捕获和分组</p>
<blockquote>
<p>括号内的字符串将会作为捕获的结果进行输出,<strong>只会输出括号内的匹配字符串</strong></p>
</blockquote>
</li>
<li><p><code>^</code> 代表字符串的开始</p>
</li>
<li><p><code>$</code> 代表字符串的结束</p>
</li>
<li><p><code>?:</code> 表示非捕获分组，匹配冒号后的内容抄但不获取匹配结果，不进行存储供以后使用。</p>
</li>
</ul>
<h4 id="密码强度验证"><a href="#密码强度验证" class="headerlink" title="密码强度验证"></a>密码强度验证</h4><p> 使用正则表达式来进行密码强度验证，一般密码由数字、字母和特殊字符组成，若由一连串的数字或字母或特殊字符，这种密码的安全性不高，而由其中两种组成密码强度一般,用户密码包含的字符种类越多，密码的安全性越高</p>
<ol>
<li><p>只有数字验证（安全性较低）（六位以上的数字密码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d&#123;6,&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>只有字母验证（六位以上的字母密码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a-zA-Z]&#123;6,&#125;</span><br><span class="line">```   </span><br><span class="line">3. 只有特殊字符的密码（六位以上的特殊字符密码）</span><br></pre></td></tr></table></figure>

<p>[.-+?\[]`/;‘@#$%^&amp;*():&lt;&gt;=~]{6,}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 注意：在集合中写[]和\时需要进行转义，因为这两个时元字符，优先级较[]来说更高</span><br><span class="line">4. 数字与字母混合使用密码</span><br></pre></td></tr></table></figure>

<p>[\da-zA-Z]<em>\d+[a-zA-Z]+[\da-zA-Z]</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**解释：**</span><br><span class="line">&gt;[\da-zA-Z]* &amp;nbsp;&amp;nbsp;表示匹配空字符串，或长度至少为1的由数字和字母组成的字符串</span><br><span class="line">    \d+[a-zA-Z]+&amp;nbsp;&amp;nbsp;表示1个或多个连续数字和1个或多个连续字母组成的字符串</span><br><span class="line">    连起来就可以匹配一系列数字和字母组成的字符串</span><br><span class="line"></span><br><span class="line">5. 数字和特殊字符串混合使用</span><br></pre></td></tr></table></figure>

<p>[\d.-+?\[]<code>/;&#39;@#$%^&amp;*():&lt;&gt;=~]*\d+[.-+?\\\[\]</code>/;‘@#$%^&amp;<em>():&lt;&gt;=~]+[\d.-+?\[]`/;‘@#$%^&amp;</em>():&lt;&gt;=~]*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6. 三种字符混合使用（密码强度比较高）</span><br></pre></td></tr></table></figure>

<p>[\da-zA-Z.-+?\[]<code>/;&#39;@#$%^&amp;*():&lt;&gt;=~]*  #0个或多个数字、字母和特殊字符的混合字符串
((\d+[a-zA-Z]+[.-+?\\\[\]</code>/;‘@#$%^&amp;<em>():&lt;&gt;=~]+)|  #数字开头<br>(\d+[.-+?\[]`/;‘@#$%^&amp;</em>():&lt;&gt;=<del>]+[a-zA-Z]+)| #数字开头<br>([a-zA-Z]+\d+[.-+?\[]`/;‘@#$%^&amp;*():&lt;&gt;=</del>]+)| #字母开头<br>([a-zA-Z]+[.-+?\[]<code>/;&#39;@#$%^&amp;*():&lt;&gt;=~]+\d+)| #字母开头
([.-+?\\\[\]</code>/;‘@#$%^&amp;<em>():&lt;&gt;=~]+\d+[a-zA-Z]+)| #特殊字符开头<br>([.-+?\[]`/;‘@#$%^&amp;</em>():&lt;&gt;=<del>]+[a-zA-Z]+\d+)| #特殊字符开头<br>)[\da-zA-Z.-+?\[]`/;‘@#$%^&amp;*():&lt;&gt;=</del>]* </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 邮箱验证</span><br><span class="line">一般邮箱在@前面会是数字和字母的混合,在其中间可能会混有`_`、`-`、`.`、`+`,在@后面可能会带有字母和数字然后.加上顶级域名或者会有两个域名</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>^[\da-zA-Z.-<em>+]+@[\da-zA-Z</em>.-+]+[.][\da-zA-Z]{2,4}$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 注意：想表示字符.时一定要加上[.],因为普通的.代表的是任意字符，而[.]代表的是字符.</span><br><span class="line"></span><br><span class="line">#### 身份证号验证</span><br><span class="line">身份证号由六位数字地址码,八位数字出生日期码，三位数字顺序码和一位数字校验码组成</span><br><span class="line">   1. 地址码规则</span><br><span class="line">   以数字1-9开始，剩下的5位数字为0-9</span><br></pre></td></tr></table></figure>

<pre><code>[1-9]\d{5}</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 年份码规则</span><br><span class="line">年份码为4位，按现实情况来说现在只有18、19、20开头的</span><br></pre></td></tr></table></figure>

<p>  (18|19|20)\d{2}<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 月份码规则</span><br><span class="line">由两位数字组成，第一位若为0，则第二位是1-9；第一位若为1，则第二位为0、1或2</span><br><span class="line">(0[1-9])|(1[0-2])</span><br><span class="line">4. 日期码规则</span><br><span class="line">若第一位取1-2，第二位可以取0-9；若第一位取0，则第二位取1-9，若第一位取3，则第二位可以取0-1</span><br></pre></td></tr></table></figure></p>
<p>  ([1-2][0-9])|(0[1-9])|(3[0-1])<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 顺序码规则</span><br><span class="line">顺序码为三位</span><br></pre></td></tr></table></figure></p>
<p>  \d{3}<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6. 校验码规则</span><br><span class="line">校验码长一位，可以是数字可以是X或者x</span><br></pre></td></tr></table></figure></p>
<p>  [\dXx]<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7. 总结</span><br></pre></td></tr></table></figure></p>
<p>  ^[1-9]\d{5}(18|19|20)\d{2}((0[1-9])|(1[0-2]))(([1-2][0-9])|(0[1-9])|(3[0-1]))\d{3}[\dXx]$</p>
<pre><code>




</code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之number</title>
    <url>/2020/06/02/%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8Bnumber/</url>
    <content><![CDATA[<h3 id="number一些方法"><a href="#number一些方法" class="headerlink" title="number一些方法"></a>number一些方法</h3><ul>
<li><p><code>number.toExponential()</code>方法：将这个number转换为一个指数形式的字符串，参数items是控制其小数点后的数字位数，这个值必须在0~20之内</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x=Math.PI;</span><br><span class="line">console.log(x.toExponential(30)); //3.142e+0</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>number.x.toFixed()</code>方法：将number转换为一个十进制形式的字符串，可选参数控制其小数点都的数字位数，默认为0，这个值必须在0~20之内</p>
</li>
<li><p><code>number.toPrecision()</code>方法：将number转换为一个十进制数子形式的字符串，可选参数控制数字的精度，表示的是所有数字的个数，这个值必须在0~21之内</p>
</li>
<li><p><code>number.toString()</code>方法：将number转换为一个字符串，可选参数表示几进制，默认是10</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x=Math.PI;</span><br><span class="line">console.log(x.toString(8)); //3.1103755242102643</span><br><span class="line">console.log(x.toString(16)); //3.243f6a8885a3</span><br><span class="line">console.log(x.toString()); //3.141592653589793</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之等号</title>
    <url>/2020/06/03/%E7%AD%89%E5%8F%B7/</url>
    <content><![CDATA[<h4 id="相等（-），严格相等（-）"><a href="#相等（-），严格相等（-）" class="headerlink" title="相等（==），严格相等（===）"></a>相等（==），严格相等（===）</h4><ul>
<li>在进行相等（==）时，如果一边是字符，一边是数字，会将字符串转换为数字再进行比较</li>
<li>在进行严格相等（===）运算时，不会进行类型的转换，会直接先判断类型是否相同，不相同时，直接为false</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>在使用Vue-resource时出现的跨域问题</title>
    <url>/2020/08/18/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="在使用Vue-resource时出现的跨域问题"><a href="#在使用Vue-resource时出现的跨域问题" class="headerlink" title="在使用Vue-resource时出现的跨域问题"></a>在使用Vue-resource时出现的跨域问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">me.$http.get(<span class="string">"http://localhost:8080/luckymoney/list"</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(data);</span><br><span class="line">              &#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>单独访问<a href="http://localhost:8080/luckymoney/list时，数据访问正常，而在页面中调用此函数时，浏览器上出现了bug，" target="_blank" rel="noopener">http://localhost:8080/luckymoney/list时，数据访问正常，而在页面中调用此函数时，浏览器上出现了bug，</a></p>
</blockquote>
<p>(<img src="https://i.loli.net/2020/08/16/eobW9F6RmtnyGTh.png" alt>)<br>这时我到处查资料，了解这是一个跨域问题.<br>在前端和后台联合开发时，在局域网内，浏览器访问别人的地址可以获取数据，但是通过接口请求，就会跨域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Luckymoney&gt; <span class="title">list</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">         response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">         response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">         <span class="keyword">return</span> luckymonyRepository.findAll();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过设置了两个头的信息，才能正式获取到</p>
</blockquote>
<p>或者当使用了spring-boot时，可以直接在Controller层中加上注解<code>@CrossOrigin</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuckymoneyController</span> </span>&#123;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客</title>
    <url>/2019/07/19/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><h4 id="步骤1-搭建各种电脑环境"><a href="#步骤1-搭建各种电脑环境" class="headerlink" title="*步骤1 搭建各种电脑环境"></a>*步骤1 搭建各种电脑环境</h4><blockquote>
<p>第一步<br>   <strong>* 1 下载nodejs 可能会添加环境变量<br>第二步<br>   *</strong> 2 下载git 并搭建git环境（并将git的bin加入环境变量path中）</p>
</blockquote>
<blockquote>
<p>第三步<br>   *** 3 创建github账户 并创建一个仓库 并命名为自己的 用户名+github.io（必须要这个名字）</p>
</blockquote>
<blockquote>
<p>第四步<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh #检查本机已存在的ssh密钥</span><br><span class="line"> 如果提示No such file or directory 说明是第一次用git</span><br><span class="line">  ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>   连续三次回车 会生成 </p>
<blockquote>
<p>C:\Users\ASUS.ssh\id_rsa.pub<br>   打开这个文件 复制全部内容<br>第五步<br>打开github主页 在右上方找到setting，在其中找到SSH and GPG keys -&gt; New SSH key，将内容复制进去<br>第六步（测试是否成功）<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p> 若提示—&gt; Hi xiaoruran! You’ve successfully authenticated, but GitHub does not provide shell access. 说明SSH配置成功</p>
<blockquote>
<p>第七步（配置git的个人信息）<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xiaoruran"</span>// 你的github用户名，非昵称</span><br><span class="line">git config --global user.email  <span class="string">"xxx@qq.com"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>第八步 hexo的相关操作<br>   ***下载hexo </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p> *** 初始化<br>   在电脑中创建一个目录 作为你的站点目录<br>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo s <span class="comment">#启动服务（一般默认是4000端口）</span></span><br><span class="line">hexo s -p 5000 <span class="comment">#将默认端口改为5000</span></span><br></pre></td></tr></table></figure></p>
<p> ***上传到github<br>  配置主目录底下的_config.yml中的deploy部分<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:xiaoruran/xiaoruran.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p>
<p>  ***可能要下载一个插件<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>第九步 （写自己的博客）<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>第十步 （修改配置文件 达到自己的效果 也可以更换主题）</p>
</blockquote>
<p>[参考链接]<br>（<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> ）<br>（<a href="https://blog.csdn.net/gsl9d1p04f6x2ts3c9/article/details/81024330" target="_blank" rel="noopener">https://blog.csdn.net/gsl9d1p04f6x2ts3c9/article/details/81024330</a> ）<br>（<a href="https://www.cnblogs.com/trista222/p/8017300.html）" target="_blank" rel="noopener">https://www.cnblogs.com/trista222/p/8017300.html）</a></p>
]]></content>
      <tags>
        <tag>think</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue后续</title>
    <url>/2020/06/03/notevue4/</url>
    <content><![CDATA[<h3 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h3><p>生命周期：从Vue实例创建、运行、销毁期间，会伴随各种各样的时间，这些事件，统称为生命周期<br>生命周期钩子：生命周期函数或者生命周期事件</p>
<h4 id="创建期间的生命周期函数"><a href="#创建期间的生命周期函数" class="headerlink" title="创建期间的生命周期函数"></a>创建期间的生命周期函数</h4><ul>
<li><code>beforeCreate</code> 实例刚在内存中被创建出来，此时，还没有初始化好<code>data</code>和<code>methods</code>属性</li>
<li><code>created</code> 实例已在内存中创建完成，此时<code>data</code>和<code>methods</code>已经创建完成，还没开始编译模块 ，在创建之后开始编译模板，最终，在内存中生成一个编译好的最终模板字符串，并准备将这个模板字符串渲染为内存中的DOM，此时只是在内存中渲染好了模板，并没有把模板挂载到真正的页面中去</li>
<li><code>beforeMount</code> 此时已经完成了模板的编译，在内存中以及渲染好了模板，但还没有挂载到页面中</li>
<li><code>mounted</code> 此时，已经将编译好的模板，挂载带了页面指定的容器中显示，用户已经可以看到渲染好的页面<h4 id="运行期间的生命周期函数"><a href="#运行期间的生命周期函数" class="headerlink" title="运行期间的生命周期函数"></a>运行期间的生命周期函数</h4></li>
<li><code>beforeUpdate</code> 状态更新之前执行该函数，此时<code>data</code>的值是最新的，虚拟DOM节点的值以改变，但是界面上显示的数据还是旧的，此时还没有开始重新渲染DOM节点</li>
<li><code>updated</code> 实例更新完毕后调用，此时页面已经重新渲染好了，数据也已更新完毕<h4 id="销毁期间的生命函数"><a href="#销毁期间的生命函数" class="headerlink" title="销毁期间的生命函数"></a>销毁期间的生命函数</h4></li>
<li><code>beforeDestory</code> 实例销毁之前调用。在这一步，实例任然可用</li>
<li><code>destoryed</code> Vue销毁后调用。调用后，Vue实例指示的所有东西都会解绑，所有事件监听器会被移除，所有的子实例也会被销毁</li>
</ul>
<blockquote>
<p>自己的话：首先beforeCreate时，只是创建了一个Vue实例，还没有初始化data和method,在  created中，已经初始化data和methods了，可以在js中使用data中的数据和methods中的方法函数。在beforeMount中已经完成了模板的编译，但没有渲染到页面上，此时页面还没渲染上data的值。mounted中已经完成了页面的挂载和渲染，从用户角度可以看到页面渲染数据完毕。数据更新时，beforeUpdated函数，Vue实例中的data已经更新完成，但此时还是在虚拟DOM节点中，未渲染同步到真实DOM数中，所以页面的数据还是旧数据。upadted中更新的数据已经渲染到真实DOM节点中，即用户可以看到更新后的数据</p>
</blockquote>
<h4 id="Vue生命周期图示"><a href="#Vue生命周期图示" class="headerlink" title="Vue生命周期图示"></a>Vue生命周期图示</h4><p><img src="https://img2018.cnblogs.com/blog/47685/201901/47685-20190111173917518-1987865733.png" alt="avatar"></p>
<h3 id="小case总结"><a href="#小case总结" class="headerlink" title="小case总结"></a>小case总结</h3><ol>
<li>在Vue中使用事件绑定机制，为元素指订处理函数时，若加了小括号，就可以传参了</li>
</ol>
<h4 id="遍历数组some和foreach"><a href="#遍历数组some和foreach" class="headerlink" title="遍历数组some和foreach"></a>遍历数组some和foreach</h4><ul>
<li><p><code>some</code>用法 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    list:[&#123;id:1,brand:&quot;奔驰&quot;,time: new Date()&#125;,</span><br><span class="line">          &#123;id:2,brand:&quot;宝马&quot;,time: new Date()&#125;</span><br><span class="line">          ]</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    del(id)&#123;</span><br><span class="line">    this.list.some((item,i)=&gt;&#123;</span><br><span class="line">        if(item.id == id)&#123;</span><br><span class="line">            this.list.splice(i,1);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 使用some时若满足条件，则直接退出循环，使用箭头函数代替 this.list.some(function(){}) 替换为 this.list.some(()=&gt;{})</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>foreach</code>用法</p>
<ul>
<li>参数 [].forEach((item,index,array)={})</li>
<li>三个参数分别是 数组内容、索引、数组本身<blockquote>
<p>注意：这里的forEach中的e要大写</p>
</blockquote>
</li>
</ul>
<h4 id="数组按照索引删除元素"><a href="#数组按照索引删除元素" class="headerlink" title="数组按照索引删除元素"></a>数组按照索引删除元素</h4></li>
<li><p><code>splice()</code>方法</p>
<ul>
<li>使用数组.splice(索引,1) 代表删除索引所在位置的元素</li>
</ul>
<h4 id="Js中判断字符串中是否包含某一字符串"><a href="#Js中判断字符串中是否包含某一字符串" class="headerlink" title="Js中判断字符串中是否包含某一字符串"></a>Js中判断字符串中是否包含某一字符串</h4></li>
<li><p><code>indexOf()</code>方法 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str=&quot;曹涵有&quot;;</span><br><span class="line">var substr=&quot;曹&quot;；</span><br><span class="line">var result=str.indexOf(substr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时的result为0,若不包含结果为-1</p>
</blockquote>
</li>
<li><p><code>includes()</code>方法</p>
<blockquote>
<p>在ES6中，为字符串提供了一个新方法，叫做String.Prototype.includes(“要包含的字符串”)，如果包含则返回true,反之返回false</p>
</blockquote>
</li>
</ul>
<h4 id="查找数组中元素方法"><a href="#查找数组中元素方法" class="headerlink" title="查找数组中元素方法"></a>查找数组中元素方法</h4><ol>
<li><p><code>find()</code></p>
<ul>
<li>查找第一个满足条件的元素，参数是一个回调函数，在回调函数中写需要查找元素的条件</li>
<li>回调函数有三个参数<code>(value,index,arr)</code>,value为当前数组元素，index为当前元素的索引，arr为当前数组</li>
<li>查找成功时返回的是数组元素，查找失败时返回的是undefined<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var list=[&quot;hh&quot;,&quot;xixi&quot;,&quot;heihei&quot;];</span><br><span class="line">list.find((val,index)=&gt;&#123;</span><br><span class="line">if(val.indexOf(&apos;h&apos;) != -1)</span><br><span class="line"> return true;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>findIndex()</code></p>
<ul>
<li>查找到第一个满足条件元素的索引,参数是一个回调函数，在回调函数中写需要查找元素的条件</li>
<li>回调函数有三个参数(value,index,arr)</li>
<li>用法和find()差不多,查找成功时返回索引值，反之返回-1</li>
</ul>
</li>
<li><p><code>filter()</code></p>
<ul>
<li>和之前两个参数和用法一样</li>
<li>返回值是一个满足条件数组，若查找失败，则返回空数组</li>
</ul>
</li>
</ol>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Vue.js 允许自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>，过滤器可以用作两个地方：<strong>mustachc插值</strong>和 <strong>v-bind表达式</strong>。过滤器应该被添加在Javascript表达式的尾部，有管道符表示；</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>全局过滤器的定义语法（<strong>本文件中的所有的Vue实例都能被共享</strong>）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.fliter(&apos;过滤器的名称&apos;,function(data)&#123;&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>function的参数：第一个参数已经规定死了，永远都是过滤器从管道符前面接受过来的数据，<br>第二乃至第三个位置可以传参</p>
</blockquote>
<h4 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&#123;msg | 过滤器名称&#125;&lt;/p&gt;1</span><br></pre></td></tr></table></figure>

<ul>
<li>私有过滤器的定义语法（<strong>在Vue实例中声明，只能被此Vue实例控制的单元所使用</strong>）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">         dataformat:function(data)&#123;&#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>在Vue实例中声明一个filters的对象，其中存放filter过滤器的实现</p>
</blockquote>
<p><strong>注意：过滤器调用的时候，采用就近原则，若全局过滤器和私有过滤器名称一致，优先调用私有过滤器</strong></p>
<h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><ol>
<li>首先 var date=new Date(这里可以穿值)；</li>
<li>将想要设置的时间格式设置好</li>
<li>var yy=date.getFullYear(); var mm=date.getMouth();var dd=date.getDate();</li>
<li>var h=date.getHours(); var m=date.getMinutes(); var s=date.getSeconds();</li>
</ol>
<h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><ol>
<li>Vue提供的：<ul>
<li>@keyup.center</li>
<li>@keyup.tab</li>
<li>@keyup.delete</li>
<li>@keyup.esc</li>
<li>@keyup.space</li>
<li>@keyup.up</li>
<li>@keyup.down</li>
<li>@keyup.right</li>
<li>@keyup.left</li>
</ul>
</li>
<li>用户可以自定义按键修饰符<ul>
<li>@keyup.键盘对应的码值</li>
</ul>
2.0+版本中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = 113;</span><br><span class="line">@keyup.f2</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>使用<code>Vue.directive()</code>来定义全局指令</p>
<ul>
<li>参数1是 指令的名称。注意：在定义的时候有不需要再v-前缀,在调用时必须使用v-指令名称来调用。</li>
<li>参数2是一个对象，身上有一些指令相关的函数，这些函数可以在特定阶段执行相关操作</li>
<li>参数二对象中有几个函数：</li>
</ul>
<ol>
<li><p><code>bind:function(el){}</code></p>
<blockquote>
<p>指的是将指令绑定到某一结点时触发，此时的el指的是此节点<br>注意：在元素刚绑定指令的时候，还没有插入到DOM树中去，这时候，调用focus方法没有作用；<br>一个元素只有插入到DOM树之后，才能获取焦点</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p v-focus&gt;&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">Vue.directive(&quot;focus&quot;,&#123;</span><br><span class="line">    bind:function(el)&#123;</span><br><span class="line">        el.focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当绑定到此p标签时触发bind方法且只会触发一次</p>
</blockquote>
<p> <strong>对象中的几种方法的第一个参数永远是el，指的是一个原生的JS对象</strong></p>
</li>
<li><p><code>inserted:function(el){}</code></p>
<blockquote>
<p>指的是元素插入到DOM树中的时候，会执行inserted()函数，只能触发一次</p>
</blockquote>
</li>
<li><p><code>updated:function(el){}</code></p>
<blockquote>
<p>指的是当VNode更新时，执行updated()函数，可能被触发多次</p>
</blockquote>
</li>
</ol>
<p>自定义指令中与样式有关的，可以在bind函数中定义，而与Js操作有关的，最好放置在inserted函数中</p>
<ul>
<li>自定义指令如何传值（v-focus=”‘hhhh’”）传递这个”hhhh”<ol>
<li>在内置函数如 bind()、inserted()、updated()中第一个参数是<code>el</code>，第二个参数就是<code>binding</code>.</li>
<li><code>binding</code>是一个对象.其中<code>binding.value</code>是使用<code>v-focus(&quot;&#39;red&#39;&quot;)中的red</code>,<code>binding.name</code>是指指令名称,<code>binding.expression</code>是指指令中的值的字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;p v-color=&quot;&apos;red&apos;&quot;&gt;&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">  Vue.directive(&quot;color&quot;,&#123;</span><br><span class="line">    bind:function(el)&#123;</span><br><span class="line">        el.focus();</span><br><span class="line">    &#125;,</span><br><span class="line">    inserted:function(el,binding)&#123;</span><br><span class="line">        el.style.color=binding.value;</span><br><span class="line">        console.log(binding.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之基础</title>
    <url>/2020/06/03/JS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="JS语言介绍"><a href="#JS语言介绍" class="headerlink" title="JS语言介绍"></a>JS语言介绍</h3><ul>
<li>JS是基于ES的语法规范加上WEB API所集成的一门解释型语言</li>
<li>JS是以弱类型为主的语言，不强调编译时检查错误，无需简历复杂的类层次，永远不用做强制类型转换，也不用疲于应付系统以得到想要的行为</li>
<li>对象字面表示法，通过列出对象的组成成分，就能被简单的创建出来，这种表示法时JSON的灵感来源</li>
<li>尽管jS有很多缺陷，但它即轻量又富有表现力</li>
<li>函数式编程</li>
</ul>
<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul>
<li>由字母开头 （不像java）后面可接上字母、数字、下划线，但不可使用保留字做变量名</li>
<li>标识符可用作语句、变量、参数、属性名、运算符和标记</li>
</ul>
<h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul>
<li>只有一种数字类型，在计算机内部存储微64位</li>
<li>没有分离出整数类型，1和1.0的值相同</li>
<li>完全避免了短整型的溢出问题，避免了一大堆因为数字类型导致的错误</li>
<li>1e2就相当于1乘以10的2次方</li>
<li>负数直接在数字前面加上-号</li>
<li><code>NaN</code>表示非正常的处理结果，不等于任何值，可以使用isNaN(number)来检测</li>
<li><code>Infinity</code> 可以无限大的值，其实是所有大于 1.79e+308的值<blockquote>
<p>Js中由一个对象Math,其中有很多关与数值的操作</p>
</blockquote>
</li>
</ul>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li>使用<code>Unicode</code>编码，所以所有的字符类型都是16位</li>
<li>特殊字符可使用\来进行转义</li>
<li>\u约定用来指订数字字符编码</li>
<li>字符串是不可变的，一旦字符串被创建，就无法改变它，但可以通过+ 运算符的连接来创建新的字符串</li>
</ul>
<h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><ul>
<li><p>顺序，选择，循环语句</p>
</li>
<li><p>一个编译单元包含一组可执行的语句。在浏览器中，script标签提供一个被编译且立即执行的编译单元。</p>
</li>
<li><p>由于缺少链接器，js将它们一起抛到一个公共的全局命名空间中</p>
</li>
<li><p>在JS中 false、null、undefined、空字符串、数字0、数字 NaN都被当成假，其它所有的值都是真的，包括true,’false’,以及所有的对象</p>
</li>
<li><p>注意:<code>for</code>语句</p>
<ol>
<li>一种是常见的三个参数（初始化从句、条件从句、增量从句）</li>
<li>另一种形式是<code>for in</code>语句，枚举一个对象的所有属性名，每次循环后，object的下一个属性名字符串会赋给variable<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(attr in obj)&#123;</span><br><span class="line"> if(obj.hasOwnProperty(attr))&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>一般需要通过检测obj.hasOwnProperty(attr)来判断这个属性名是这个对象的成员，还是来自<strong>原型链</strong></p>
</blockquote>
</li>
<li><p>try语句</p>
<ol>
<li>try语句执行一个代码块，并捕获该代码块抛出的任何异常。</li>
<li>catch从句定义一个新的变量variable来接受抛出的异常对象</li>
<li>throw语句抛出一个异常，若该语句在try代码块中，控制流将会跳转到catch从句中。若throw语句在函数中，则该函数调用被放弃，控制流调用该函数的try语句中的catch从句</li>
</ol>
</li>
</ul>
<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><ul>
<li>最简单的表达式时字面量值（比如字符串或数字）、变量、内置的值（true、false、null、undefined、NaN和Infinity）、以new开头的调用表达式、以delete开头的属性提取表达式、包在圆括号内的表达式…</li>
<li>运算符优先级<ol>
<li><code>.</code> <code>[]</code> <code>()</code> 提取属性与调用函数</li>
<li><code>delete</code> <code>new</code> <code>typeof</code> <code>+</code> <code>-</code> <code>!</code> 一元运算符</li>
<li><code>*</code> <code>/</code> <code>%</code> 乘法、除法、求余</li>
<li><code>+</code> <code>-</code> 加法、减法</li>
<li><code>&lt;==</code> <code>&gt;==</code> <code>&gt;</code> <code>&lt;</code>关系运算符，不等式运算符</li>
<li><code>===</code> <code>!==</code> 等式运算符</li>
<li><code>&amp;&amp;</code> 逻辑与</li>
<li><code>||</code> 逻辑或</li>
<li><code>? :</code> 三元运算符<blockquote>
<p>&amp;&amp; 与&amp;的区别： 两种都能用作逻辑与，&amp;是当两边的表达式为真时，才能为真。&amp;&amp;是短路测试，当前面的表达式为假时，不需要测试后面的表达式</p>
</blockquote>
</li>
</ol>
</li>
<li><code>typedef</code>语句<ul>
<li>用typedef运算符产生的值有<code>number</code> <code>string</code> <code>boolean</code> <code>undefined</code> <code>function</code> <code>object</code></li>
</ul>
</li>
</ul>
<h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ol>
<li>对象字面量</li>
<li>数组字面量</li>
<li>函数字面量</li>
</ol>
<h3 id="对象（key-value）"><a href="#对象（key-value）" class="headerlink" title="对象（key-value）"></a>对象（key-value）</h3><p> JavaScript中的简单数据类型包括数字、字符串、布尔值、null和undefined值，其他的所有制都是对象。数字、字符串、布尔值貌似对象，因为他们拥有方法，但他们不可变。</p>
<p> 数组是对象，函数是对象，正则表达式是对象。</p>
<ul>
<li>对象是属性的容器，其中每个属性都有自己的名字和值。属性名是包含空字符串在内的任意字符串。属性值可以是出undefined值之外的任何值</li>
<li>JS中的对象是无类型的，对属性名和值没有限制。</li>
<li><strong>JS包含一种原型链的特征，允许对象继承另一个对象的属性。正确的使用能减少对象初始化时消耗的内存与时间</strong></li>
</ul>
<h3 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h3><ul>
<li><p>函数就是对象。对象是“key-value”对的集合并拥有一个连到原型对象的隐藏连接。对象字面量产生的对象连接到Object.prototype。函数对象连接到Function.prototype（该原型对象本身连接到Object.prototype）。</p>
</li>
<li><p>每个函数在创建时会附加两个隐藏属性：函数的上下文（也可以理解为call和apply方法，在Function.prototype中定义）和实现函数行为的代码</p>
</li>
</ul>
<h4 id="函数字面量"><a href="#函数字面量" class="headerlink" title="函数字面量"></a>函数字面量</h4><ul>
<li>函数通过函数字面量来创建<ol>
<li>第一部分为保留字 <code>function</code></li>
<li>第二部分时函数名，可以省略，这样的话就是匿名函数（anonymous）</li>
<li>第三部分时包围在圆括号内的一组参数，<strong>javascript不对参数列表做强匹配，当实参少于形参，剩下形参的值就为undefined，当实参多余形参个数时，只会匹配前几个实参，剩下多余的实参会直接忽略，任何类型的值可以被传递给任何参数</strong></li>
<li>第四部分为包围在花括号的一组语句，这是函数的主题，在函数被调用时执行</li>
</ol>
</li>
</ul>
<h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>在调用函数时，每个函数会接受两个附加的参数：<code>this</code>和<code>arguments</code>，参数this在面向对象编程时非常重要，<strong>this的值取决于调用的模式</strong></p>
<h4 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h4><ol>
<li>方法调用模式<br>此模式主要是指：当函数声明在一个对象之中，这个函数属于对象的一个方法，此时函数内部的this属性被绑定到该对象中，这是this可以访问自己所属的对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myObject=&#123;</span><br><span class="line">    value: 0,</span><br><span class="line">    add : function(el)&#123;</span><br><span class="line">       this.value += typeof el===&quot;number&quot; ?el:1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.add(2);</span><br><span class="line">console.log(myObject.value)  // 2</span><br><span class="line">myObject.add();</span><br><span class="line">console.log(myObject.value)  // 3</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>这里的this是访问myObject对象，它能从对象中取值或对对象进行修改。通过this可以取得所属对象的上下文的方法称为公共方法</p>
<ol start="2">
<li>函数调用模式<br>当一个函数并非一个对象的属性时，那么它就是被当作一个函数来调用的<ul>
<li>以此模式调用函数时，this会绑定到全局对象。不能利用内部函数来帮助它工作。但可以定义一个变量并给他赋值为this，则内部函数就可以通过那个变量访问到this<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo()&#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();   //this指的是全局对象window</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</blockquote>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myObject=&#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    add : function(el)&#123;</span><br><span class="line">     this.value += typeof el===&quot;number&quot; ?el:1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.double=function()&#123;</span><br><span class="line">    var that=this;</span><br><span class="line">    //定义一个函数，这个helper函数中的this是全局对象window</span><br><span class="line">    var helper=function()&#123;</span><br><span class="line">      that.value+=that.value</span><br><span class="line"> &#125;</span><br><span class="line">    helper();</span><br><span class="line">&#125;</span><br><span class="line">myObject.double();</span><br><span class="line">console.log(myObject.value)   //2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时可以通过that访问到myObject对象</p>
<ol start="3">
<li>构造器调用模式<br>javascript是基于原型继承的语言<ul>
<li>提供了一套与基于类的语言（java）类似的对象构建语法。</li>
<li>若在一个函数前面加上<code>new</code>来调用，那么背地里会创建一个连接到该函数的<code>prototype</code>成员的新对象，<strong>同时this会被绑定到这个新对象上</strong>。</li>
<li><code>new</code> 前缀会改变return语句的行为</li>
<li><strong>通过prototype来创建的方法或属性，是为所有的new实例所共有的</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var newObject=function(str)&#123;</span><br><span class="line">this.value=str;</span><br><span class="line">&#125;</span><br><span class="line">//通过prototype 创建属于所有实例的新方法或者属性</span><br><span class="line">newObject.prototype.getValue=function()&#123;</span><br><span class="line">    return this.value;</span><br><span class="line">&#125;</span><br><span class="line"> //通过new来创建实例</span><br><span class="line"> var obj=new newObject(&quot;hhhh&quot;)</span><br><span class="line">console.log(obj.getValue());</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</blockquote>
<blockquote>
<p>若一个函数通过new来调用，则称之为<em>构造器函数</em></p>
<ul>
<li>这里不推荐使用此模式来调用函数<ol start="4">
<li>上下文调用模式（apply/call调用模式）<br>JavaScript是一门函数式的面向对象编程语言，函数可以拥有方法</li>
</ol>
</li>
<li>上下文模式：根据用户传递的参数，指定函数内部不同的this的值</li>
<li>核心形式： 以call/apply方法来调用某个函数</li>
<li>call/apply方法定义在Function.prototype对象中，每个函数都能访问到这两个方法</li>
<li>function fn(){}<br>fn—&gt;fn._<em>proto_</em>(Function.prototype)–&gt;fn._<em>proto_</em>._<em>proto_</em>(Object.prototype)<ul>
<li>语法形式<ul>
<li>函数名.call(…)</li>
<li>函数名.apply(…)<br>这两种形式功能一样，唯一不同的就是参数的形式</li>
</ul>
</li>
<li>apply时，第一个参数要么是对象，要么是null。如果是null/undefined就是函数调用，如果是对象，则是对象的方法调用。后面的参数是一个数组参数，将函数的参数依次放在数组中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function up(str)&#123;</span><br><span class="line">  console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">var obj=&#123;</span><br><span class="line">    name: &quot;hhh&quot;,</span><br><span class="line">    age: 10</span><br><span class="line">&#125;</span><br><span class="line">up.apply(obj);  // &#123;name: &quot;hhh&quot;, age: 10&#125;</span><br><span class="line">//此时的this指的是obj</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</blockquote>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> function up(str)&#123;</span><br><span class="line">  console.log(this);</span><br><span class="line"> &#125;</span><br><span class="line"> var obj=&#123;</span><br><span class="line">  name: &quot;hhh&quot;,</span><br><span class="line">  age: 10</span><br><span class="line"> &#125;</span><br><span class="line">up.apply(null);  // window</span><br><span class="line">//此时的this指的是window</span><br></pre></td></tr></table></figure>

<ul>
<li>call时，其他与apply相同，只是参数列表可以不用数组，可以直接使用，，这样的形式</li>
</ul>
<h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>当函数被调用时，会得到一个免费配送的参数，那就是<code>arguments</code>数组，这并不是一个严格的数组，只是一个类似数组的对象，拥有一个length的属性，没有任何数组的方法<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function arg()&#123;</span><br><span class="line">var i=0;</span><br><span class="line">var sum=0;</span><br><span class="line">for(i=0;i&lt;arguments.length;i++)&#123;</span><br><span class="line">   sum+=arguments[i];</span><br><span class="line">&#125; </span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line">var sum=arg(1,2,3,4);</span><br><span class="line">console.log(sum);  //10</span><br></pre></td></tr></table></figure></p>
<h4 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h4><p>一个函数总会返回一个值。如果没有指定返回值，则返回undefined。<br>如果函数调用时在前面加上了new前缀，且返回值不是一个对象，则返回this（该新对象）</p>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function exe(a,b)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">    if(typeof a !== &quot;number&quot; || typeof b !== &quot;number&quot;)&#123;</span><br><span class="line">        //抛出一个Error实例,第一个参数为name,第二个参数为message,也可以自定义其他的参数，可以在catch方法参数e对象中获取</span><br><span class="line">        throw new Error(&quot;typeError&quot;,&quot;类型不是number&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">    console.log(e.name+ &quot;---&quot;+ e.message);</span><br><span class="line">    return undefined;</span><br><span class="line">&#125;</span><br><span class="line">    return a+b;</span><br><span class="line">&#125;</span><br><span class="line">var x=exe(2,&quot;dd&quot;); //Error---typeError undefined</span><br></pre></td></tr></table></figure>

<h3 id="扩充类型的功能"><a href="#扩充类型的功能" class="headerlink" title="扩充类型的功能"></a>扩充类型的功能</h3><p>JS中可以给语言的基本类型扩充功能。可以给Object.prototype添加方法，可以让该方法对所有对象都可用。<br>这样的方式对函数、数组、字符串、布尔、数字、正则表达式都适用</p>
<ol>
<li><p>首先可以给Function.prototype增加方法来使得该方法对所有函数可用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//通过增加一个method方法，便于下次给对象增加方法时就不必键入prototype，省掉一些麻烦</span><br><span class="line">Function.prototype.method=function(name,func)&#123;</span><br><span class="line">    //由于相当于在对象里面增加方法，所以此时this指代的是Function</span><br><span class="line">    this.prototype[name]=func;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来就可以给基本数据类型增加方法了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//给String类型增加方法</span><br><span class="line">String.method(&quot;addstr&quot;,function()&#123;</span><br><span class="line">    return this+&quot;addstr&quot;;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&quot;xixixi&quot;.addstr()); //&quot;xixixiaddstr&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本类型的原型是公用结构，在类库混用时一定要无比小心。一个保险的做法就是只在确定没有该方法时才添加它</p>
</li>
</ol>
<p>理解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Function.prototype.method=function(fulname,val)&#123;</span><br><span class="line">  if(!this.prototype[fulname])&#123;</span><br><span class="line">    this.prototype[fulname]=val;</span><br><span class="line">  &#125;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">Function.method(&apos;bind&apos;,function(_arg)&#123;</span><br><span class="line">  var met=this; //这个this应该是bind此方法</span><br><span class="line">  console.log(this);</span><br><span class="line">  var slice=Array.prototype.slice;</span><br><span class="line">  var args=slice.apply(arguments,[1]); //argguments指的是bing方法所带的参数</span><br><span class="line">  return function()&#123;</span><br><span class="line">    return met.apply(_arg,args.concat(slice.apply(arguments,[0])));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var x=function()&#123;</span><br><span class="line">  return this.value;</span><br><span class="line">&#125;.bind(&#123;value:11&#125;);</span><br><span class="line">console.log(x());   //11</span><br></pre></td></tr></table></figure>

<h3 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h3><p>数组是一段线性分配的内存，它通过整数计算偏移来访问其中的元素。JavaScript没有像此类数组一样的数据结构。<br>它拥有一种类数组（array-like）特性的对象。它把数组的下表转换为字符串，用其作为属性，它比真正的数组慢，它的属性的检索和更新的方式与对象一摸一样。</p>
<ul>
<li><p>js中的数组不必要求类型一致</p>
</li>
<li><p>长度： js中数组的length属性是没有上界的</p>
</li>
<li><p>可以直接设置length的值，设置更大的length并不会给数组分配更多的空间。但将length设置小会导致所有下标大于新的length的属性将被删除</p>
</li>
<li><p>删除：</p>
<ul>
<li><p><code>splice</code>方法:该方法会改变原来的数组，它可以删除元素，可以替换元素，可以在数组的指定位置插入（添加）元素</p>
<ol>
<li>splice(2,1) 则是在索引为2的位置删除一个元素，若果是删除元素，则返回的是含有被删除元素的数组</li>
<li>splice(2,0,1) 则是在索引为2的位置插入1这个元素</li>
</ol>
</li>
<li><p><code>slice()</code>方法：此方法是用来从数组中提取指定元素，不会改变原有数组，将截取到的元素封装到一个新的数组中返回</p>
<ol>
<li>语法：annayObject.slice(start,end); 前闭后开 </li>
</ol>
</li>
</ul>
</li>
<li><p>遍历</p>
<ol>
<li><p>使用for in 语句来遍历一个数组的所有属性，但无法保证属性的顺序</p>
<blockquote>
<p>并且此方法可能会从原型链中得到意外属性</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (const key in object) &#123;</span><br><span class="line">    if (object.hasOwnProperty(key)) &#123;</span><br><span class="line">      const element = object[key];&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //避免遍历继承属性</span><br></pre></td></tr></table></figure>
</li>
<li><p>常规的for语句可以避免这些问题</p>
</li>
</ol>
</li>
<li><p>使用typeof判断数组会出现’object’</p>
</li>
<li><p>判断一个对象是否为数组</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var is_arrry=function(val)&#123;</span><br><span class="line">return val &amp;&amp; typeof val ===&apos;object&apos; &amp;&amp; val.constructor === Array</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   //由于原型链的存在，使得扩充方法更加简单</span><br><span class="line">   Object.prototype.method=function(funname,val)&#123;</span><br><span class="line"> if(!this.prototype[funname])&#123;</span><br><span class="line">   this.prototype[funname]=val;</span><br><span class="line"> &#125;</span><br><span class="line"> return this;</span><br><span class="line">&#125;</span><br><span class="line">Array.method(&apos;reduce&apos;,function(f,value)&#123;</span><br><span class="line">  var i;</span><br><span class="line">  for(i=0;i&lt;this.length;i++)&#123;</span><br><span class="line">    value=f(this[i],value);</span><br><span class="line">  &#125;</span><br><span class="line">  return value;</span><br><span class="line">&#125;) </span><br><span class="line">var date=[1,2,3,4];</span><br><span class="line">var add=function(a,b)&#123;</span><br><span class="line">   return a+b;</span><br><span class="line">&#125;</span><br><span class="line">var sum=date.reduce(add,0);</span><br><span class="line">console.log(sum);  //10</span><br></pre></td></tr></table></figure>

<ul>
<li><code>concat()</code>方法<ol>
<li>产生一个新数组，包含一份原数组的浅复制，并把一个或多个参数item附在其后面，如果参数item是一个数组，那么它的每个元素被分别添加</li>
<li>var a=[1,2,3],b=[4,5,6]; var c=a.concat(b,true);此时的c为[1,2,3,4,5,6,true];</li>
</ol>
</li>
</ul>
</li>
<li><p><code>array.join()</code>方法:主要用来将数组构造成一个字符串，通过参数的形式来进行连接，默认的参数为逗号<code>,</code>.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=[&apos;1&apos;,3,4];</span><br><span class="line">var c=a.join(&quot;、&quot;);</span><br><span class="line">var d=a.join();</span><br><span class="line">console.log(c);// 1、3、4</span><br><span class="line">console.log(d); // 1,3,4</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>array.pop()</code>方法 ：使得数组可以像堆栈那样工作。pop方法移除array中的最后一个元素并返回该元素，如果array是empty，则返回undefined。</p>
</li>
<li><p><code>array.push()</code>方法：该方法将一个或多个参数附加到array的尾部。如果item是一个数组，会把整个数组作为单个元素添加进去，并返回这个array的最新长度值</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=[1,3,4];</span><br><span class="line">var b=[true,&quot;hh&quot;];</span><br><span class="line">var c=a.push(b);//此时a=[[1,3,4,[true,&quot;hh&quot;]]</span><br><span class="line">var d=c.join();</span><br><span class="line">console.log(c);//4</span><br><span class="line">console.log(d);//1,3,4,true,hh</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>array.reverse()</code>方法：该方法反转array里的元素的顺序，并返回array本身；</p>
</li>
<li><p><code>array.shift()</code>方法：该方法移除array中的第一个元素并返回该元素</p>
<ol>
<li>若数组是空的，则返回undefined;</li>
<li>shift通常比pop慢很多</li>
</ol>
</li>
<li><p><code>array.unshift()</code>方法：与push方法一样，用于把元素添加到数组中去，但它是吧item插入到array的<em>开始部分</em>，返回array的新length</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
